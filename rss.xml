

<rss version="2.0">
	<channel>
		<title>HugoGiraudel.com</title>
		<link>http://hugogiraudel.com</link>
		<description>I write about Sass. Mostly.</description>
		<language>en</language>
		<copyright>2014</copyright>
		
			

<item>
	<title>SassDoc, a documentation tool for Sass</title>
	
	<link>http://www.sitepoint.com/sassdoc-documentation-tool-sass/</link>
	<guid>http://www.sitepoint.com/sassdoc-documentation-tool-sass/</guid>
	
	
	<pubDate>Thu, 03 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>How to check for dependencies in Sass libraries</title>
	
	<link>http://webdesign.tutsplus.com/tutorials/how-to-check-for-dependencies-in-sass-libraries--cms-21558</link>
	<guid>http://webdesign.tutsplus.com/tutorials/how-to-check-for-dependencies-in-sass-libraries--cms-21558</guid>
	
	
	<pubDate>Wed, 02 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Building a customization API in Sass</title>
	
	<link>http://hugogiraudel.com/2014/07/01/building-a-customization-api-in-sass</link>
	<guid>/2014/07/01/building-a-customization-api-in-sass</guid>
	
	
	<pubDate>Tue, 01 Jul 2014 00:00:00 GMT</pubDate>
	<description>
&lt;blockquote&gt;
  &lt;p&gt;I am glad to have &lt;a href=&quot;http://ezekielg.com/&quot;&gt;Ezekiel Gabrielse&lt;/a&gt; today, dropping some Sass knowledge on how to build a powerful Sass API to customize the feel and look of elements. Fasten your belts boys, this is quite intense!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey guys! I am the creator of a relatively new Sass grid-system called &lt;a href=&quot;https://github.com/ezekg/flint&quot;&gt;Flint&lt;/a&gt;, and a lightweight Compass extension called &lt;a href=&quot;https://github.com/ezekg/SassyExport&quot;&gt;SassyExport&lt;/a&gt;, which we will be discussing throughout this series.&lt;/p&gt;

&lt;p&gt;Since I already mentioned the word &lt;em&gt;series&lt;/em&gt;, this article will be the first post of a 2 part series. Today we&amp;#8217;re going to create a Sass-powered customization API that can be plugged into a front-end API, such as a Wordpress theming framework or even allow live customization through JS. &lt;/p&gt;

&lt;p&gt;Today&amp;#8217;s discussion will focus on the Sass part, but it will flow straight into part 2 of this series, where we will be utilizing a brand new tool I developed called &lt;a href=&quot;https://github.com/ezekg/SassyExport&quot;&gt;SassyExport&lt;/a&gt;, which allows you to &lt;em&gt;export&lt;/em&gt; JSON &lt;em&gt;from&lt;/em&gt; Sass and write it into a new file to use elsewhere in your projects.&lt;/p&gt;

&lt;h2&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Our Sass-powered customization API&lt;/strong&gt; will essentially be able to &lt;em&gt;mark&lt;/em&gt; elements within our stylesheet that we want to customize, and which of those elements &lt;em&gt;properties&lt;/em&gt; may be customized as well as default &lt;em&gt;values&lt;/em&gt; for these properties. &lt;/p&gt;

&lt;p&gt;To be able to track all this stuff, we are going to use Sass maps to sort the output of this API by selector. Within that selector&amp;#8217;s map, we&amp;#8217;ll not only list its customizable properties but also the defaults for its values in case the user has not modified those.&lt;/p&gt;

&lt;p&gt;We are going to do this all within Sass, and as we will discuss in part 2 of the series, a language like PHP or JS can hook in to our Sass-API and use the data to modify our stylesheet for these specific &lt;code&gt;$selector-&amp;gt;$property&lt;/code&gt; relationships. For the sake of time, we&amp;#8217;re going to keep this project simple and only stick to color customization. &lt;/p&gt;

&lt;p&gt;Therefore, we will create a color palette as a map, in order to pull &lt;em&gt;values&lt;/em&gt; from it. That way we can also hook into this palette &lt;em&gt;module&lt;/em&gt; through our front-end API and then allow the user to modify the original color palette. &lt;/p&gt;

&lt;p&gt;Furthermore, because we&amp;#8217;ll be keeping track of which selectors (or if we&amp;#8217;re getting really technical &amp;mdash; which &lt;em&gt;sub-modules&lt;/em&gt;) are using which color, we can then update their values if the user ever modifies that sub-module&amp;#8217;s color &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Okay, let&amp;#8217;s sum up&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;We need to create a global variable for our color palette.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The palette naming convention should be semantic. For instance, we&amp;#8217;ll prefer &lt;em&gt;primary&lt;/em&gt; and &lt;em&gt;complementary&lt;/em&gt; to &lt;em&gt;red&lt;/em&gt; and &lt;em&gt;blue&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;The code itself needs to be modular and flexible, allowing the user to create a color palette of any scale. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;We need to keep another global variable of all customizable elements with the following data:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the full selector name (kind of &lt;code&gt;&amp;amp;&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;its customizable properties;&lt;/li&gt;
  &lt;li&gt;default values for each property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;We also need to output these default values into our stylesheet, that way our mixin will have two purposes: serve as our customization API and a way to retrieve our color palette to use within the actual stylesheet.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;What we want? API!&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Throughout this article I will be using another project of mine called &lt;a href=&quot;https://github.com/ezekg/flint&quot;&gt;Flint&lt;/a&gt; as a base. It has various helper-functions that we will be using such as &lt;code&gt;selector_string()&lt;/code&gt;, a Ruby function returning a stringified version of the current selector (&lt;code&gt;&amp;amp;&lt;/code&gt;) so that we can use it in interpolation (which currently isn&amp;#8217;t possible). As well as a few others self-explanitory functions such as &lt;code&gt;exists()&lt;/code&gt;, &lt;code&gt;is-map()&lt;/code&gt;, &lt;code&gt;is-list()&lt;/code&gt; and &lt;code&gt;map-fetch()&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the end result of what we will be building today. Take a look at the code, and follow along as we go through creating this API and understanding the methodology behind it, if that&amp;#8217;s your thing.&lt;/p&gt;

&lt;p class=&quot;sassmeister&quot; data-gist-id=&quot;ccf842e5ee74287f1868&quot; data-height=&quot;480&quot;&gt;&lt;a href=&quot;http://sassmeister.com/gist/ccf842e5ee74287f1868&quot;&gt;Play with this gist on SassMeister.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Building our palette&lt;/h2&gt;

&lt;p&gt;Firstly, let&amp;#8217;s create the map for our color palette setup.&lt;/p&gt;

&lt;p&gt;We are going to keep our colors in a sub-map called &lt;em&gt;&amp;#8220;palette&amp;#8221;&lt;/em&gt; so we can keep our main API&amp;#8217;s code more modular to allow it to work with other customizable properties than just colors.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Customization module defaults
$customizer: (
  &quot;palette&quot;: (
    &quot;primary&quot;: (
      &quot;lightest&quot;: #eff3d1,
      &quot;light&quot;: #bbdfbc,
      &quot;base&quot;: #8bb58e,
      &quot;dark&quot;: #0b3c42,
      &quot;darkest&quot;: #092226,
    ),
    &quot;complementary&quot;: (
      &quot;light&quot;: #f6616e,
      &quot;base&quot;: #f2192c,
      &quot;dark&quot;: #b40a19,
    ),
    &quot;gray&quot;: (
      &quot;light&quot;: #819699,
      &quot;base&quot;: #4b5557,
      &quot;dark&quot;: #333a3b,
    ),
    &quot;black&quot;: #131517,
    &quot;white&quot;: #f2f9ff,
  ),
) !global;

// Global variables
$customizer-instances: () !global;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we have a pretty simple map of our default color palette to use within our customization API. I also created another global variable called &lt;code&gt;$customizer-instances&lt;/code&gt; that will keep a record of all the data from each use of the API. It&amp;#8217;s an empty map for now. &lt;/p&gt;

&lt;p&gt;So, let&amp;#8217;s go ahead and move on to the next step, which is fleshing out the bones of our main mixin that we will be using to drive the API.&lt;/p&gt;

&lt;h2&gt;Building our API&amp;#8217;s driver&lt;/h2&gt;

&lt;p&gt;Before we go any further, let&amp;#8217;s decide on how we want our API to work. To be able to jump right into the code in the rest of this article, this is what our syntax is going to look like at the end:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.selector {
  @include customizer(
    $args: (
      color: &quot;white&quot;,
      background: &quot;primary&quot; &quot;darkest&quot;,
      border-color: &quot;complementary&quot; &quot;base&quot;
    ), 
    $uses: &quot;palette&quot;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to make the API easy to use and as close to the usual CSS syntax as possible, we&amp;#8217;re going to require the first argument to be a map called &lt;code&gt;$args&lt;/code&gt; so that we can use &lt;code&gt;$key-&amp;gt;$value&lt;/code&gt; pairs for each customizable property, as well as allowing multiple properties to be passed to a single instance of the mixin. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: If you&amp;#8217;re unfamiliar with using maps as arguments, &lt;a href=&quot;http://www.sitepoint.com/using-sass-maps/&quot;&gt;Hugo wrote up a pretty nifty article on that&lt;/a&gt;, as well as many other use-cases for maps.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The next argument will be fetching a module from within the above &lt;code&gt;$customizer&lt;/code&gt; map, which in this case will be our &lt;em&gt;&amp;#8220;palette&amp;#8221;&lt;/em&gt; module. We&amp;#8217;ll call this argument &lt;code&gt;$uses&lt;/code&gt;, as we will be fetching (&lt;em&gt;using&lt;/em&gt;) values from it for use in our first argument, &lt;code&gt;$args&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I also want to make it fall back to outputting plain CSS if no module to use is specified, rather than erroring out we can simply &lt;code&gt;@warn&lt;/code&gt; the user that the mixin shouldn&amp;#8217;t be used that way. Therefore, our API will be less frustrating to newer users that don&amp;#8217;t happen to be using it correctly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Create new customizable properties, save to instance map
// 
// @param {Map}           $args         - map of customizable property-&amp;gt;value pairs
// @param {String | Null} $users (null) - module to pull property values from
// 
// @output $property-&amp;gt;$value pairs for each argument

@mixin customizer($args, $uses: null) {
  
  // Make sure argument is a map
  @if is-map($args) {

    // Use module? Expecting module to exist
    @if $uses != null {

      // Check if module exists
      @if exists($customizer, $uses) {
        // ... All is safe, let's work with the arguments
      } 

      // Module did not exist, throw error
      @else {
        @warn &quot;Invalid argument: #{$uses}. Module was not found.&quot;;
      }

    } 

    // No module specified, expecting plain CSS
    @else {
      // ... Since we'll be expecting valid CSS, let's output it here

      // Warn that customization mixin shouldn't be used without a module
      @warn &quot;The customization mixin should not be used without specifying a module to use.&quot;;
    }

  } 

  // Argument was not a map, throw error
  @else {
    @warn &quot;Invalid argument: #{$args}. Argument type is not a map.&quot;;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;#8217;ve commented the above code, but let&amp;#8217;s go ahead and dig a little deeper into the structure of the mixin. Like I said above, the first thing we should do is check that the &lt;code&gt;$args&lt;/code&gt; argument is a map, and depending on the result, we&amp;#8217;ll either throw an error, or move on.&lt;/p&gt;

&lt;p&gt;Next, let&amp;#8217;s check if a module was passed as the &lt;code&gt;$uses&lt;/code&gt; argument; if not, let&amp;#8217;s output any &lt;code&gt;$key-&amp;gt;$value&lt;/code&gt; pairs as plain CSS. Also we will throw a warning to the user to let him know that the mixin shouldn&amp;#8217;t be used for plain CSS output. &lt;/p&gt;

&lt;p&gt;On the other hand, if &lt;code&gt;$uses&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, let&amp;#8217;s move on to check whether or not the module actually exists within our &lt;code&gt;$customizer&lt;/code&gt; variable (the palette map), like before we will either error out with a warning, or move forward.&lt;/p&gt;

&lt;p&gt;Now, since we want to be able to pass multiple customizable properties into a single instance of the mixin, we need to iterate over each of those arguments. So, from within our conditional statement that checks whether or not the module exists, let&amp;#8217;s add the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// @if exists($customizer, $uses) {

  // Run through each argument individually
  @each $arg in $args {
    // Break up argument into property-&amp;gt;value
    $property: nth($arg, 1);
    $value: nth($arg, 2);

    // Get values from module
    @if is-list($value) or exists($customizer, $value) {
      $value: // ... We need to fetch the values from our module here;
    }

    // Output styles
    #{$property}: $value;
  }

// } @else module did not exist
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to loop through each argument, we use an &lt;code&gt;@each&lt;/code&gt; loop. Within the loop, we retrieve both the &lt;code&gt;$property&lt;/code&gt; and the &lt;code&gt;$value&lt;/code&gt; using the &lt;code&gt;nth()&lt;/code&gt; function. Then, we check if &lt;code&gt;$value&lt;/code&gt; is either a list (when we&amp;#8217;re fetching the value from a deeper sub-module such as &lt;em&gt;&amp;#8220;primary&amp;#8221;&lt;/em&gt;), or that the module exists (for values that don&amp;#8217;t have additional sub-modules, but rather a single value such as &lt;em&gt;&amp;#8220;white&amp;#8221;&lt;/em&gt;). Assuming this check returns &lt;code&gt;true&lt;/code&gt;, we need a way to fetch these values from their deeper sub-modules; so let&amp;#8217;s create a function for that called &lt;code&gt;use-module()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Fetching our colors&lt;/h2&gt;

&lt;p&gt;The function is going to take two arguments, fairly similar to the arguments our main mixin takes. The first argument is a list of &lt;code&gt;$args&lt;/code&gt;, which we will use to fetch the value from the module we passed into &lt;code&gt;$uses&lt;/code&gt; in the main mixin. &lt;/p&gt;

&lt;p&gt;Which brings us to the second argument! Since the function needs to know which module it&amp;#8217;s fetching from, let&amp;#8217;s create an argument called &lt;code&gt;$module&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Return value for property based on passed module
// 
// @param {List}   $args   - list of keys for customizable property
// @param {String} $module - module to pull property values from
// 
// @return {*} - $value from $module

@function use-module($args, $module) {
  $exists: true;

  // Append the list of arguments to the module to pass to map-fetch
  $module: join($module, $args);

  // Check if sub-modules exist
  // Make sure all sub-modules exist
  @if length($args) &amp;gt; 1 {
    @each $arg in $args {
      @if not exists($customizer, $arg) {
        $exists: false;
      }
    }
  }

  @if $exists {
    // Grab value from module by passing in newly built list
    @return map-fetch($customizer, $module);
  } 

  @else {
    // One or more of the modules were not found, throw error
    @warn &quot;Invalid arguments: #{$module}. One or more module or sub-module not found.&quot;;
    @return false;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that I&amp;#8217;m doing a few simple checks to make sure every module and sub-module exists within &lt;code&gt;$customizer&lt;/code&gt; map. If the argument was only a single value, then our check from the main mixin (before we even enter the function) will do just fine, but if we&amp;#8217;re fetching from additional sub-modules, we need to make sure those exist so that we don&amp;#8217;t get any error that would make the compilation crash.&lt;/p&gt;

&lt;p&gt;So, our code is fully functional right now, but we haven&amp;#8217;t kept a record of any of the data we passed, or what selectors and which of it&amp;#8217;s properties are customizable. So, let&amp;#8217;s go ahead and create the function needed to do that.&lt;/p&gt;

&lt;h2&gt;Creating our instance map&lt;/h2&gt;

&lt;p&gt;Remember we initialized an empty global map called &lt;code&gt;$customizer-instances&lt;/code&gt;? As I said, we are going to use that variable to house each instance of the mixin and keep track of the selector, which modules it uses, all of its customizable properties as well as their default values.&lt;/p&gt;

&lt;p&gt;The function will be called &lt;code&gt;new-customizer-instance()&lt;/code&gt;. It will take two arguments indentical to the arguments that the main &lt;code&gt;customizer()&lt;/code&gt; mixin takes, and for good reason: we&amp;#8217;re essentially going to loop over the arguments the exact same way, but instead of outputting styles for the selector, we&amp;#8217;re going to save these variables to an &lt;code&gt;$instance&lt;/code&gt; map with the selectors name as the top-most key.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Create new customizable instance
// 
// @param {Map}    $args   - map of customizable property-&amp;gt;value pairs
// @param {String} $module - module to pull property values from
// 
// @return {Map} updated instance map

@function new-customizer-instance($args, $module) {
  // Define static selector
  $selector: selector-string(); // Flint Ruby function
  // Empty argument map
  $instance-properties: ();

  // Run through each argument individually
  @each $property, $value in $args {
    // Merge into argument map
    $instance-properties: map-merge($instance-properties, (
      &quot;#{$property}&quot;: (
        &quot;module&quot;: $module,
        &quot;value&quot;: $value
      )
    ));
  }

  // Create new instance map for selector, save properties
  $customizer-instance: (&quot;#{$selector}&quot;: $instance-properties);

  // Merge into main map
  @return map-merge($customizer-instances, $customizer-instance);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we&amp;#8217;re using the Ruby function I talked about ealier called &lt;code&gt;selector-string()&lt;/code&gt;, which outputs a stringified version of the &lt;code&gt;&amp;amp;&lt;/code&gt; operator in Sass. That way we can work with the selector the same way we would with any other string, which currently isn&amp;#8217;t possible when using the normal &lt;code&gt;&amp;amp;&lt;/code&gt; operator. You can read more about that issue &lt;a href=&quot;https://gist.github.com/nex3/8050187&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, we&amp;#8217;re going to create an empty map that is going to contain each customizable &lt;code&gt;$property&lt;/code&gt; and all of the data for it such as its &lt;code&gt;$module&lt;/code&gt; and the &lt;code&gt;$value&lt;/code&gt; that is used from the module. &lt;/p&gt;

&lt;p&gt;Unlike the main mixin, we&amp;#8217;re not going to keep track of what styles are actually outputted, but rather where those styles came from within our module (&lt;em&gt;&amp;#8220;palette&amp;#8221;&lt;/em&gt;). That way, if say, the &lt;em&gt;&amp;#8220;primary&amp;#8221; &amp;#8220;base&amp;#8221;&lt;/em&gt; color changes via our front-end API, we know that this element is using that value, so we can then update the stylesheet to reflect the change.&lt;/p&gt;

&lt;p&gt;But, as we can tell from the function above, it&amp;#8217;s returning a merged map, but we haven&amp;#8217;t actually told the new map to override the global &lt;code&gt;$customizer-instances&lt;/code&gt; variable. Instead of making the function do that, let&amp;#8217;s create a mixin to handle that part so we can simply include it into the main mixin where we need to. That way, if we ever needed to make small minor adjustments, we only have to update it in one area. This next mixin is going to be rather simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Create new customizable instance
// 
// @param {Map}    $args   - map of customizable property-&amp;gt;value pairs
// @param {String} $module - module to pull property values from
// 
// @return {Map} - updated instance map
 
@mixin new-customizer-instance($args, $module) {
  $customizer-instances: new-customizer-instance($args, $module) !global;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All that this mixin is doing, is taking the updated instance map from the &lt;code&gt;new-customizer-instance()&lt;/code&gt; function, and setting the global &lt;code&gt;$customizer-instances&lt;/code&gt; variable to reflect that update.&lt;/p&gt;

&lt;h2&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Going back to our main &lt;code&gt;customizer()&lt;/code&gt; mixin, let&amp;#8217;s update the code to include all of our new functions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Create new customizable properties, save to instance map
// 
// @param {Map}           $args        - map of customizable property-&amp;gt;value pairs
// @param {String | Null} $uses (null) - module to pull property values from
// 
// @output $property-&amp;gt;$value pairs for each argument

@mixin customizer($args, $uses: null) {

  // Argument is not a map, throw error
  @if not is-map($args) {
    @warn &quot;Invalid argument: #{$args}. Argument type is not a map.&quot;;
  }

  @else {
    // Use module? Expecting module to exist
    @if $uses != null {

      // Module doesn't exist, throw error
      @if not exists($customizer, $uses) {
        @warn &quot;Invalid argument: #{$uses}. Module was not found.&quot;;
      }

      @else {
        // Save arguments to instance map
        @include new-customizer-instance($args, $uses);

        // Run through each argument individually
        @each $property, $value in $args {
          // Check if sub-module exists
          @if is-list($value) or exists($customizer, $value) {
            // Get values from sub-module
            $value: use-module($value, $uses);  
          } 
          
          // Sub-module did not exist, throw error
          @else {
            @warn &quot;Invalid argument: #{$value}. Sub-module was not found.&quot;;
          }

          // Output styles
          #{$property}: $value;
        }
      } 
    } 

    // No module specified, expecting plain CSS
    @else {

      // Loop through each argument individually and output
      @each $property, $value in $args {
        #{$property}: $value;
      }

      // Warn that customization mixin shouldn't be used without a module
      @warn &quot;The customization mixin should not be used without specifying a module to use.&quot;;
    }

  } 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;The result&lt;/h2&gt;

&lt;p&gt;Above, I simply added in our new functions, and if all went well, our code should be fully functional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.selector {
  @include customizer($args: (
    color: &quot;white&quot;,
    background: &quot;primary&quot; &quot;darkest&quot;,
    border-color: &quot;complementary&quot; &quot;base&quot;,
  ), $uses: &quot;palette&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everytime the &lt;code&gt;customizer()&lt;/code&gt; mixin is run, a new instance is created with all of the needed data.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Updates the global instance map with the new selector,
$customizer-instances: (
  &quot;.selector&quot;: (
      &quot;color&quot;: (
        &quot;module&quot;: &quot;palette&quot;,
        &quot;value&quot;: &quot;white&quot;,
      ), 
      &quot;background&quot;: (
        &quot;module&quot;: &quot;palette&quot;,
        &quot;value&quot;: (&quot;primary&quot;, &quot;darkest&quot;),
      ),
      &quot;border-color&quot;: (
        &quot;module&quot;: &quot;palette&quot;,
        &quot;value&quot;: (&quot;complementary&quot;, &quot;base&quot;),
      ),
    ),
  ),
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the new styles are fetched and outputted into the stylesheet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// And outputs the selectors styles from our module,
.selector {
  color: #f2f9ff;
  background: #092226;
  border-color: #f2192c;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;Now that we have these variables (&lt;code&gt;$customizer&lt;/code&gt; and &lt;code&gt;$customizer-instances&lt;/code&gt;) containing a wealth of useful data, in part 2 we&amp;#8217;ll walk through the basic syntax for &lt;a href=&quot;https://github.com/ezekg/SassyExport&quot;&gt;SassyExport&lt;/a&gt; and how we&amp;#8217;re going to use it to export all of this data into JSON. We will also discuss the various ways for this data to give opportunity to create some pretty impressive features when coupled with other languages, such as PHP.&lt;/p&gt;

&lt;p&gt;Until next time, you can play with the customization API on &lt;a href=&quot;http://sassmeister.com/gist/ccf842e5ee74287f1868&quot;&gt;SassMeister&lt;/a&gt;, check out &lt;a href=&quot;https://github.com/ezekg/SassyExport&quot;&gt;SassyExport on Github&lt;/a&gt;, or &lt;a href=&quot;http://rubygems.org/gems/SassyExport&quot;&gt;download the gem&lt;/a&gt; to use with Compass in your own project.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ezekiel Gabrielse is a &lt;a href=&quot;http://ezekielg.com/2014/05/07/the-unintended/&quot;&gt;recent designer-turned-developer&lt;/a&gt; based in north Texas currently employed at &lt;a href=&quot;http://produceresults.com/&quot;&gt;Produce Results&lt;/a&gt; as a developer, and on the odd day, designer. You should definitely follow him on &lt;a href=&quot;https://twitter.com/ezekkkg&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
</item>


<item>
	<title>Tips to help you level up your Sass</title>
	
	<link>http://www.sitepoint.com/tips-help-level-up-sass/</link>
	<guid>http://www.sitepoint.com/tips-help-level-up-sass/</guid>
	
	
	<pubDate>Thu, 26 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Speaking on SassBites #42</title>
	
	<link>https://www.youtube.com/watch?v=H6Y9r49InXo</link>
	<guid>https://www.youtube.com/watch?v=H6Y9r49InXo</guid>
	
	
	<pubDate>Wed, 25 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>All you ever need to know about Sass interpolation</title>
	
	<link>http://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375</link>
	<guid>http://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375</guid>
	
	
	<pubDate>Tue, 24 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Bitwise operators in Sass</title>
	
	<link>http://hugogiraudel.com/2014/06/22/bitwise-operators-in-sass</link>
	<guid>/2014/06/22/bitwise-operators-in-sass</guid>
	
	
	<pubDate>Sun, 22 Jun 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;A couple of days ago, &lt;a href=&quot;https://twitter.com/valeriangalliat&quot;&gt;Valérian Galliat&lt;/a&gt; and I had the crazy idea of implementing bitwise operators in Sass. It went like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Hugo&lt;/strong&gt;: Do you know how bitwise operators work?  &lt;br /&gt;
&lt;strong&gt;Val&lt;/strong&gt;: Yes.  &lt;br /&gt;
&lt;strong&gt;Hugo&lt;/strong&gt;: Do you think we could implement them in Sass?  &lt;br /&gt;
&lt;strong&gt;Val&lt;/strong&gt;: No.  &lt;br /&gt;
(Loading&amp;#8230;)  &lt;br /&gt;
&lt;strong&gt;Val&lt;/strong&gt;: Well, in fact we could.  &lt;br /&gt;
&lt;strong&gt;Hugo&lt;/strong&gt;: LET&amp;#8217;S DO IT!  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And so we did, hence a short article to relate the story as well as providing a (useless) use case. But first let&amp;#8217;s catch up on bitwise operators, shall we?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: project is on GitHub. Check out &lt;a href=&quot;https://github.com/HugoGiraudel/SassyBitwise&quot;&gt;SassyBitwise&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;B-b-b-b-bitwise&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: I am no programmer so please kindly apologize any shortcut I could make when explaining bitwise operators.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You are probably not without knowing numbers we use in everyday life are expressed in base 10, also known as &lt;em&gt;decimal&lt;/em&gt;. &lt;em&gt;Hexadecimal&lt;/em&gt; is base 16. &lt;em&gt;Octal&lt;/em&gt; is base 8. And &lt;em&gt;binary&lt;/em&gt; is base 2. Just to name a few popular bases.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s put this very simple: bitwise operators are operators for numbers expressed in their binary form. Most common bitwise operators are AND (&lt;code&gt;&amp;amp;&lt;/code&gt;), OR (&lt;code&gt;|&lt;/code&gt;) and NOT (&lt;code&gt;~&lt;/code&gt;), but there are also XOR (&lt;code&gt;^&lt;/code&gt;), LEFT-SHIFT (&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;) and RIGHT-SHIFT (&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;To illustrate this explanation, allow me to have a little example (inspired from &lt;a href=&quot;http://en.wikipedia.org/wiki/Bitwise_operation#Bitwise_operators&quot;&gt;Wikipedia&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ~7
NOT 0111 (decimal 7)
  = 1000 (decimal 8)

# 5 &amp;amp; 3
    0101 (decimal 5)
AND 0011 (decimal 3)
  = 0001 (decimal 1)

# 5 | 3
    0101 (decimal 5)
OR  0011 (decimal 3)
  = 0111 (decimal 7)

# 2 ^ 10
    0010 (decimal 2)
XOR 1010 (decimal 10)
  = 1000 (decimal 8)

# 23 &amp;lt;&amp;lt; 1
   00010111 (decimal 23) LEFT-SHIFT 1
=  00101110 (decimal 46)

# 23 &amp;gt;&amp;gt; 1
   00010111 (decimal 23) RIGHT-SHIFT 1
=  00001011 (decimal 11)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, the idea is pretty straightforward:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;NOT&lt;/em&gt; converts &lt;code&gt;1&lt;/code&gt;s in &lt;code&gt;0&lt;/code&gt;s, and &lt;code&gt;0&lt;/code&gt;s in &lt;code&gt;1&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;AND&lt;/em&gt; takes &lt;code&gt;1&lt;/code&gt;s if both are &lt;code&gt;1&lt;/code&gt;s, else &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;OR&lt;/em&gt; takes &lt;code&gt;1&lt;/code&gt; if any are &lt;code&gt;1&lt;/code&gt;, else &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;XOR&lt;/em&gt; takes &lt;code&gt;1&lt;/code&gt; if one of 2 is &lt;code&gt;1&lt;/code&gt;, else &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LEFT-SHIFT&lt;/em&gt; shifts all bits from &lt;code&gt;n&lt;/code&gt; to the left&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;RIGHT-SHIFT&lt;/em&gt; shifts all bits from &lt;code&gt;n&lt;/code&gt; to the right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#8217;re more a &lt;em&gt;table&lt;/em&gt; kind of guy:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&amp;#160;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Result&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NOT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NOT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;AND&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;OR&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;XOR&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&amp;#160;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 6&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 7&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Bit 8&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Binary&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LEFT-SHIFT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RIGHT-SHIFT&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So you got bitwise.&lt;/p&gt;

&lt;h2&gt;Sass implementation&lt;/h2&gt;

&lt;p&gt;Now, we wanted to implement this in Sass. There are two ways of doing it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;convert to binary string, then apply operations char per char (a char being a bit in this context)&lt;/li&gt;
  &lt;li&gt;rely on mathematical equivalents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We could have decided to manipulate binary strings but god knows why, we ended up implementing the mathematical equivalents of all operators. Fortunately, we didn&amp;#8217;t have to figure out the formula (we are not &lt;em&gt;that&lt;/em&gt; clever): &lt;a href=&quot;http://en.wikipedia.org/wiki/Bitwise_operation#Mathematical_equivalents&quot;&gt;Wikipedia has them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may think that we didn&amp;#8217;t need a decimal to binary converter since we use math rather than string manipulation. Actually, we had to write a &lt;code&gt;decimal-to-binary()&lt;/code&gt; function because we needed to know the length of the binary string to compute bitwise operations. &lt;/p&gt;

&lt;p&gt;We could have figured this length without converting to binary if we had a &lt;code&gt;log()&lt;/code&gt; function. And we could have made a &lt;code&gt;log()&lt;/code&gt; function if we had a &lt;code&gt;frexp()&lt;/code&gt; function. And we could have made a &lt;code&gt;frexp()&lt;/code&gt; function if we had bitwise operators. Do you see the problem here?&lt;/p&gt;

&lt;p&gt;Valérian summed it up quite nicely in a Tweet:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-partner=&quot;tweetdeck&quot;&gt;&lt;p&gt;&amp;amp;, | and ^ bitwise operators math formulas needs log(), but log() needs frexp() which needs bitwise operators. Fak! cc &lt;a href=&quot;https://twitter.com/HugoGiraudel&quot;&gt;@HugoGiraudel&lt;/a&gt;&lt;/p&gt;&amp;mdash; Valérian Galliat (@valeriangalliat) &lt;a href=&quot;https://twitter.com/valeriangalliat/statuses/474127810798555136&quot;&gt;June 4, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;I won&amp;#8217;t dig into Sass code because it doesn&amp;#8217;t have much point. Let&amp;#8217;s just have a look at the final implementation. We have implemented each operator as a Sass function called &lt;code&gt;bw-*&lt;/code&gt; where &lt;code&gt;*&lt;/code&gt; stands for the name of the operator (e.g. &lt;code&gt;and&lt;/code&gt;). Except for &lt;code&gt;bw-not()&lt;/code&gt; which is a rather particuliar operator, all functions accept 2 arguments: both decimal numbers.&lt;/p&gt;

&lt;p&gt;On top of that, we have built a &lt;code&gt;bitwise()&lt;/code&gt; function (aliased as &lt;code&gt;bw()&lt;/code&gt;) which provides a more friendly API when dealing with bitwise operations. It accepts any number of queued bitwise operations, where operators are quoted. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// 42 | 38 | 24
$value: bitwise(42 '|' 38 '|' 24);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So that&amp;#8217;s not too bad. The fact that operators have to be quoted for Sass not to crash is kind of annoying, but I suppose we can live with it. Other than that, it&amp;#8217;s pretty much like if you were doing bitwise operations in other language, except you wrap all this stuff in &lt;code&gt;bitwise()&lt;/code&gt; or &lt;code&gt;bw()&lt;/code&gt;. In my opinion, the API is pretty simple to use.&lt;/p&gt;

&lt;h2&gt;Applications&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s be honest: there is none. Sass is not a low-level programming language. It does not have any valid use case for bitwise operations. Meanwhile, we implemented bit flags. &lt;em&gt;Bit flags&lt;/em&gt; is a programming technique aiming at storing several booleans in a single integer in ordre to save memory.&lt;/p&gt;

&lt;p&gt;Here is a great &lt;a href=&quot;http://forum.codecall.net/topic/56591-bit-fields-flags-tutorial-with-example/&quot;&gt;introduction to bit flags&lt;/a&gt; but I&amp;#8217;ll try to sum up. The idea behind &lt;em&gt;bit flags&lt;/em&gt; is to have a collection of flags (think of them as options) mapped to powers of 2 (usually with an &lt;code&gt;enum&lt;/code&gt; field in C/C++). Each option will have its own bit flag.&lt;/p&gt;

&lt;pre style=&quot;line-height: .9&quot;&gt;&lt;code&gt;00000000 Bin    | Dec
│││││││└ 1 &amp;lt;&amp;lt; 0 | 1
││││││└─ 1 &amp;lt;&amp;lt; 1 | 2
│││││└── 1 &amp;lt;&amp;lt; 2 | 4
││││└─── 1 &amp;lt;&amp;lt; 3 | 8
│││└──── 1 &amp;lt;&amp;lt; 4 | 16
││└───── 1 &amp;lt;&amp;lt; 5 | 32
│└────── 1 &amp;lt;&amp;lt; 6 | 64
└─────── 1 &amp;lt;&amp;lt; 7 | 128&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;#8217;s say option A is &lt;code&gt;1 &amp;lt;&amp;lt; 0&lt;/code&gt; (DEC 1) and option B is &lt;code&gt;1 &amp;lt;&amp;lt; 1&lt;/code&gt; (DEC 2). If we &lt;em&gt;OR&lt;/em&gt; them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   00000001 (A)
OR 00000010 (B)
 = 00000011
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result &amp;mdash; let&amp;#8217;s call it &lt;em&gt;Z&lt;/em&gt; &amp;mdash; holds both options, right? To retrieve separately A and B from Z, we can use the &lt;em&gt;AND&lt;/em&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    00000011 (Z)
AND 00000001 (A)
  = 00000001

    00000011 (Z)
AND 00000010 (B)
  = 00000010
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far so good. Now what if we try to &lt;em&gt;AND&lt;/em&gt; Z and, option C (&lt;code&gt;1 &amp;lt;&amp;lt; 2&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    00000011 (Z)
AND 00000100 (C)
  = 00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result of &lt;code&gt;Z &amp;amp; C&lt;/code&gt; isn&amp;#8217;t equal to &lt;code&gt;C&lt;/code&gt;, so we can safely assume the C option hasn&amp;#8217;t been passed.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s pretty much how bit flags work. Now let&amp;#8217;s apply it to Sass as an example of SassyBitwise. First thing to do, define a couple of flags:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Flags
$A: bw(1 '&amp;lt;&amp;lt;' 0);
$B: bw(1 '&amp;lt;&amp;lt;' 1);
$C: bw(1 '&amp;lt;&amp;lt;' 2);
$D: bw(1 '&amp;lt;&amp;lt;' 3);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need a mixin that would theorically accepts multiple boolean options. As a proof of concept, our mixin will accept a single argument: &lt;code&gt;$options&lt;/code&gt;, a &lt;strong&gt;number&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Custom mixin
// ---
// @param [number] $options: bitwise encoded flags
// ---
@mixin custom-test(/* number */ $options) {
  is-A-flag-set: bw($options '&amp;amp;' $A);
  is-B-flag-set: bw($options '&amp;amp;' $B);
  is-C-flag-set: bw($options '&amp;amp;' $C);
  is-D-flag-set: bw($options '&amp;amp;' $D);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now we call it, passing it the result of a bitwise &lt;em&gt;OR&lt;/em&gt; operation of all our flags.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Call
test {
  @include custom-test(bw($A '|' $C '|' $D));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As expected, the result is the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;test {
  is-A-flag-set: true;
  is-B-flag-set: false;
  is-C-flag-set: true;
  is-D-flag-set: true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;That&amp;#8217;s it folks, SassyBitwise. No point, much fun. As always.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: a huge thanks to Valérian Galliat for helping me out with this.&lt;/em&gt;&lt;/p&gt;
</description>
</item>


<item>
	<title>A better solution for managing z-index with Sass</title>
	
	<link>http://www.sitepoint.com/better-solution-managing-z-index-sass/</link>
	<guid>http://www.sitepoint.com/better-solution-managing-z-index-sass/</guid>
	
	
	<pubDate>Fri, 20 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Template engines and JavaScript</title>
	
	<link>http://hugogiraudel.com/2014/06/17/template-engines-and-javascript</link>
	<guid>/2014/06/17/template-engines-and-javascript</guid>
	
	
	<pubDate>Tue, 17 Jun 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;I couldn&amp;#8217;t find an appropriate title. I recently &lt;a href=&quot;http://mixture.io/blog/jekyll-mixture/&quot;&gt;moved my site from Jekyll to Mixture&lt;/a&gt; and took the time to rethink the way I dealt with JavaScript. In this article, I will give you my opinion regarding this topic and show you how I managed to execute conditional JavaScript depending on global variables.&lt;/p&gt;

&lt;h2&gt;Template what..?&lt;/h2&gt;

&lt;p&gt;A template engine is some kind of tool helping you writing markup. &lt;a href=&quot;&quot;&gt;Twig&lt;/a&gt; is the template engine coming with Symfony. Both Jekyll and Mixture uses &lt;a href=&quot;&quot;&gt;Liquid&lt;/a&gt;, the template engine from Shopify. You may also have heard of Smarty, Mustache.js or Handlebars.js.&lt;/p&gt;

&lt;p&gt;The idea behind any template engine is to have template files that can be used and reused, imported and extended in order to have a dynamic, DRY and reusable HTML architecture. In this article, I will mostly talk about Liquid because it is the one used by Jekyll and Mixture, as well as Twig which I heavily use at work.&lt;/p&gt;

&lt;h2&gt;What&amp;#8217;s the matter?&lt;/h2&gt;

&lt;p&gt;Template engines expose global variables. In Liquid, those are mostly the ones declared in your YAML Front Matter (the header from every post). In Twig, they can be data passed from the controller, or super-global variables, whatever.&lt;/p&gt;

&lt;blockquote class=&quot;pull-quote--right&quot;&gt;Don't write your JS in template files.&lt;/blockquote&gt;

&lt;p&gt;Sometimes, you need to access such variables in your JavaScript code. Let me make this as clear as possible: writing JavaScript in a template file just because you need a variable from a template is not a clean solution. At work, we had developers writing huge chunks of JavaScript in &lt;code&gt;.html.twig&lt;/code&gt; files because they needed some data from the controller in their JavaScript application. This sucks.&lt;/p&gt;

&lt;p&gt;JavaScript should mostly go in &lt;code&gt;.js&lt;/code&gt; file. Markup should go in template files. Not the other way around. Especially not when it&amp;#8217;s getting bigger than a couple of lines.&lt;/p&gt;

&lt;h2&gt;Back to the problem&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s get back to the initial topic: on my blog, I need to execute some JavaScript snippets depending on the variables declared in the YAML Front Matter from the page I am in. For instance if the article includes a CodePen, I should be able to tell JavaScript to include CodePen JS file. If the article allows comments (which is usually the case), then JavaScript should include Disqus. If I want the article to include a table of contents at the top, then JavaScript should be aware of that and do what needs to be done.&lt;/p&gt;

&lt;p&gt;Before moving to Mixture, I handled the problem in a rather drastic (and dirty) way: all templates included a &lt;code&gt;scripts.liquid&lt;/code&gt; file at the bottom. In this file, I wrapped JavaScript snippets with Liquid conditions. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;{% if post.codepen %}
  &amp;lt;script src=&quot;... source to CodePen JS file ...&quot;&amp;gt;&amp;lt;/script&amp;gt;
{% endif % }

{% if post.comments %}
  ... Disqus JavaScript snippet ...
{% endif %}

{% if post.tableOfContents %}
  ... Table of contents JavaScript snipppet ...
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is not ideal. First, JavaScript lays in a template file. We could work around the issue by moving JavaScript snippets to separate &lt;code&gt;.js&lt;/code&gt; files, then only include them when needed but we would possibly do several HTTP requests while a single one could be enough. Secondly, it is ugly. Very ugly.&lt;/p&gt;

&lt;h2&gt;A possible solution&lt;/h2&gt;

&lt;p&gt;When moving to Mixture, I took the time to think of how I would solve this issue to end up with a clean and DRY solution. The first thing I wanted to do was putting the JavaScript in &lt;a href=&quot;https://github.com/HugoGiraudel/hugogiraudel.github.com/blob/mixture/assets/js/src/app.js&quot;&gt;a &lt;code&gt;.js&lt;/code&gt; file&lt;/a&gt;, so let&amp;#8217;s start with that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// app.js
(function (global) {

  var App = function (conf) {
    this.conf = global.extend({
      codepen: false,
      sassmeister: false,
      tableOfContent: false,
      tracking: true,
      ad: true,
      comments: false,
      layout: 'default',
      disqus: {
        name: 'hugogiraudel',
        title: false,
        url: window.location.href
      }
    }, conf || {});

    this.initialize();
  };

  App.prototype.initialize = function () { /* ... */ };

  global.App = App;
}(window))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what&amp;#8217;s going on here? In a JavaScript file, in a closure, we define a new class called &lt;code&gt;App&lt;/code&gt;, that can be instantiated with an object of options (&lt;code&gt;conf&lt;/code&gt;). This one is extended with an object of default parameters. When instantiated, it automatically calls the &lt;code&gt;initialize()&lt;/code&gt; method. Let&amp;#8217;s see what it does.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;App.prototype.initialize = function () {
  if (this.conf.tracking === true) {
    this.tracking();
  }

  if (this.conf.ad === true) {
    this.ad();
  }

  if (this.conf.comments === true) {
    this.comments();
  }

  if (this.conf.codepen === true) {
    this.codepen();
  }

  if (this.conf.sassmeister === true) {
    this.sassmeister();
  }

  // ...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No magic here, the &lt;code&gt;initialize()&lt;/code&gt; method simply calls other methods based on the configuration. We could simplify the code even more by calling the methods based on the configuration key names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;['tracking', 'ad', 'comments', 'codepen', 'sassmeister'].forEach(function (key) {
  if (this.conf[key] === true) {
    this[key]();
  }
}.bind(this));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;#8217;s no big deal, we don&amp;#8217;t really need this. And now, the other methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;App.prototype.tracking = function () {
  global._gaq = [
    ['_setAccount','UA-XXXXXXXX-X'],
    ['_trackPageview']
  ];

  this._inject(&quot;//www.google-analytics.com/ga.js&quot;);
};

App.prototype.ad = function () {
  this._inject(&quot;//engine.carbonads.com/z/24598/azcarbon_2_1_0_HORIZ&quot;);
};

App.prototype.comments = function () {
  global.disqus_shortname = this.conf.disqus.name;
  global.disqus_url = this.conf.disqus.url;
  global.disqus_title = this.conf.disqus.title;

  this._inject(&quot;//&quot; + disqus_shortname + &quot;.disqus.com/embed.js&quot;);
};

App.prototype.codepen = function () {
  this._inject(&quot;//codepen.io/assets/embed/ei.js&quot;);
};

App.prototype.sassmeister = function () {
  this._inject(&quot;//static.sassmeister.com/js/embed.js&quot;);
};

App.prototype._inject = function (url) {
  var d = document,
      s = &quot;script&quot;,
      g = d.createElement(s),
      z = d.getElementsByTagName(s)[0];

  g.async = true;
  g.src = url;
  z.parentNode.insertBefore(g, z);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All resources are loaded asynchronously thanks to the &lt;code&gt;_inject&lt;/code&gt; (pseudo-)private function.&lt;/p&gt;

&lt;h2&gt;So what?&lt;/h2&gt;

&lt;p&gt;We still haven&amp;#8217;t really solved the problem yet. How are we going to pass our Liquid variables to the JavaScript? Well, this is the moment we need to get back to &lt;a href=&quot;https://github.com/HugoGiraudel/hugogiraudel.github.com/blob/mixture/templates/includes/scripts.liquid&quot;&gt;&lt;code&gt;scripts.liquid&lt;/code&gt;&lt;/a&gt; file. No more conditional JavaScript snippets; instead, we instanciate the &lt;code&gt;App&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script src=&quot;/assets/js/main.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
document.addEventListener('DOMContentLoaded', function() {
  var app = new App({
    codepen: {{ post.codepen }},
    sassmeister: {{ post.sassmeister }},
    tableOfContent: {{ post.summary }},
    comments: {{ post.comments }},
    layout: '{{ post.layout }}',
    disqus: {
      title: '{{ post.title }}',
    },
    tracking: true,
    ad: true
  });
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the only chunk of JavaScript in a template file. It is called on every page, once the DOM has been fully loaded. It grabs data from the YAML Front Matter in a clean and dynamic way. Than, JavaScript deals with the rest.&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;There you have it. A clean JavaScript application running on template variables, yet not using engine&amp;#8217;s conditional tags or being written in a template file.&lt;/p&gt;

&lt;p&gt;If you think of anything to improve it, be sure to share. In any case, I hope you liked it. :)&lt;/p&gt;
</description>
</item>


<item>
	<title>Moving from Jekyll to Mixture</title>
	
	<link>http://mixture.io/blog/jekyll-mixture/</link>
	<guid>http://mixture.io/blog/jekyll-mixture/</guid>
	
	
	<pubDate>Mon, 16 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>

		
	</channel>
</rss>
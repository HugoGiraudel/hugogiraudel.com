

<rss version="2.0">
	<channel>
		<title>HugoGiraudel.com</title>
		<link>http://hugogiraudel.com</link>
		<description>I write about Sass. Mostly.</description>
		<language>en</language>
		<copyright>2014</copyright>
		
			

<item>
	<title>SassDoc and Semantic Versioning</title>
	
	<link>http://hugogiraudel.com/2014/09/01/sassdoc-and-semantic-versioning</link>
	<guid>/2014/09/01/sassdoc-and-semantic-versioning</guid>
	
	
	<pubDate>Mon, 01 Sep 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;If you are not familiar with the concept of Semantic Versioning, I invite you to read &lt;a href=&quot;http://www.sitepoint.com/semantic-versioning-why-you-should-using/&quot;&gt;my article&lt;/a&gt; on topic at SitePoint. To sum things up, it is a way to version softwares in ordre to provide meaning across version number bumps.&lt;/p&gt;

&lt;p&gt;It looks like this: &lt;code&gt;major.minor.patch&lt;/code&gt; (e.g. &lt;code&gt;1.3.37&lt;/code&gt;). &lt;em&gt;Major&lt;/em&gt; version is for API changes and backward incompatibilities, &lt;em&gt;minor&lt;/em&gt; is for backward compatible features and &lt;em&gt;patch&lt;/em&gt; is for bug fixes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://npmjs.org&quot;&gt;npm&lt;/a&gt; using Semantic Versioning for its packages, it is no surprise we use it at &lt;a href=&quot;https://github.com/SassDoc/sassdoc&quot;&gt;SassDoc&lt;/a&gt;. Meanwhile, we have seen quite a few suprises regarding our version bumps, so I thought I would clarify some things in a short article.&lt;/p&gt;

&lt;h2&gt;Isn’t it too soon for &lt;code&gt;1.0.0&lt;/code&gt;?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;… I mean, project is not even a month old.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We have started working on SassDoc mid-June and released the stable version of &lt;code&gt;1.0.0&lt;/code&gt; on July 17th according to npm, so we basically took a month for the launch.&lt;/p&gt;

&lt;p&gt;When we were first talking about &lt;code&gt;1.0.0&lt;/code&gt;, someone told us it was too soon because the projet needed to mature a bit first.&lt;/p&gt;

&lt;p&gt;While it makes sense in some way, I think releasing a stable version after a month of such a small project as SassDoc isn’t &lt;em&gt;too soon&lt;/em&gt;, especially when 4 developers have been working on it.&lt;/p&gt;

&lt;p&gt;The project mature as we are working on it and as people start using it. There is no need to wait weeks or months before launching it: we need feedbacks. And you don’t get feedbacks when project is on &lt;code&gt;0.4.3&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;You’ve released 4 minor versions in 2 weeks!&lt;/h2&gt;

&lt;p&gt;Version &lt;code&gt;1.1.0&lt;/code&gt; came on July 20th (3 days after &lt;code&gt;1.0.0&lt;/code&gt;). Version &lt;code&gt;1.2.0&lt;/code&gt; has been released on August 11th (&lt;a href=&quot;http://webdesign.tutsplus.com/articles/new-features-and-a-new-look-for-sassdoc--cms-21914&quot;&gt;announced on Tuts+&lt;/a&gt; the next day). Version &lt;code&gt;1.3.0&lt;/code&gt; came one week later, on August 18th, and version &lt;code&gt;1.4.0&lt;/code&gt; has been launched 2 days later, on August 20th. Finally, version &lt;code&gt;1.5.0&lt;/code&gt; (latest stable as of writing) came on August 25th.&lt;/p&gt;

&lt;blockquote class=&quot;pull-quote--right&quot;&gt;Between 10/08 and 25/08, we went from &lt;code&gt;1.1.0&lt;/code&gt; to &lt;code&gt;1.5.0&lt;/code&gt;.&lt;/blockquote&gt;

&lt;p&gt;So indeed, between August 10th and August 25th, we went from &lt;code&gt;1.1.0&lt;/code&gt; to &lt;code&gt;1.5.0&lt;/code&gt;. So what?&lt;/p&gt;

&lt;p&gt;Here is how we plan versions minor versions: we have a list of features we’d like to work on. Small features are planned for the next minor version, while features that require a reasonable amount of work are delayed for 1 or 2 versions.&lt;/p&gt;

&lt;p&gt;Version &lt;code&gt;1.2.0&lt;/code&gt; has been quite long to build because we released a major feature: custom themes and templates. Not only did this required to build a whole &lt;a href=&quot;https://github.com/themeleon/themeleon&quot;&gt;theming engine&lt;/a&gt;, but we also had to make sure the &lt;a href=&quot;https://github.com/SassDoc/sassdoc/wiki/SassDoc-Data-Interface&quot;&gt;data structure&lt;/a&gt; we hand over to the theme is fixed and documented so that people are able to build their own themes right away.&lt;/p&gt;

&lt;p&gt;But for other minor versions, we just group a couple of features and bundle them together once they are ready. There is no need to wait a specific amount of time. I suppose we could release one version every two weeks as agile methodology dictates, but I’m not sure that would help us whatsoever.&lt;/p&gt;

&lt;p&gt;In the end, we’ve seen some positive effects with this feature-rush. People seem enthusiastic about SassDoc and willing to get their hands on a project that is being improved on a daily basis.&lt;/p&gt;

&lt;h2&gt;You’ll hit &lt;code&gt;2.0.0&lt;/code&gt; in no time!&lt;/h2&gt;

&lt;p&gt;And so what? Is there some specific rule telling that v2 should happend like one year after v1? Here is the thing: we push as many things in v1 as possible as long as they do not introduce backward incompatible changes. When this won’t be possible anymore, we’ll move on to the next major version.&lt;/p&gt;

&lt;p&gt;For instance, if we ever come up with a way to allow both invisible comments and C-styles comments, chances are high that we will break something. Thus, we push it back to &lt;code&gt;2.0.0&lt;/code&gt;. It may be in &lt;code&gt;2.0.0&lt;/code&gt; or &lt;code&gt;2.4.0&lt;/code&gt;, we don’t know.&lt;/p&gt;

&lt;p&gt;Along the same line, we are considering providing a way to document BEM architecture (&lt;code&gt;@module&lt;/code&gt;, &lt;code&gt;@element&lt;/code&gt;…) but since this is likely to be one of the biggest feature we’ve ever shipped, we’ll probably break something; probably minor, but still. So this is delayed to &lt;code&gt;~2.0.0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Meanwhile, while we’re able to add new features without breaking the API, we keep going. I can already tell there will be a &lt;code&gt;1.6.0&lt;/code&gt; that we are currently working on (bringing YAML configuration on the tabl)e, and while I don’t exclude a &lt;code&gt;1.7.0&lt;/code&gt;, I think we will jump on &lt;code&gt;2.0.0&lt;/code&gt; at this point.&lt;/p&gt;

&lt;h2&gt;You don’t use patches!&lt;/h2&gt;

&lt;p&gt;Well, this is wrong for starter. Plus, when you release a minor version every 3 days, you are less likely to have bug reports. Anyway, when we find a bug in stable version, we immediately push a patch (hence &lt;code&gt;1.1.1&lt;/code&gt; to &lt;code&gt;1.1.6&lt;/code&gt;, &lt;code&gt;1.3.1&lt;/code&gt;, &lt;code&gt;1.3.2&lt;/code&gt;, &lt;code&gt;1.4.1&lt;/code&gt;), and we’ll keep doing so.&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;We’ve been working like crazy on SassDoc lately because not only is this Node project very fun to work on, but we’ve realized our 4-people crew is working quite well. Each of us have some special skills that fit very well with others.&lt;/p&gt;

&lt;p&gt;Plus, we have noticed people were really interested in having a powerful tool to document their Sass projects. We only hope SassDoc will soon be the go-to tool for this.&lt;/p&gt;

&lt;p&gt;By the way, we need feedbacks. And opinions. Consider joining us on &lt;a href=&quot;https://github.com/SassDoc/sassdoc&quot;&gt;the repository&lt;/a&gt; to chat on opened issues!&lt;/p&gt;
</description>
</item>


<item>
	<title>Sass 3.4 is out!</title>
	
	<link>http://www.sitepoint.com/sass-3-4-is-out/</link>
	<guid>http://www.sitepoint.com/sass-3-4-is-out/</guid>
	
	
	<pubDate>Fri, 22 Aug 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>What&#39;s up with SassDoc 1.2?</title>
	
	<link>http://webdesign.tutsplus.com/articles/new-features-and-a-new-look-for-sassdoc--cms-21914</link>
	<guid>http://webdesign.tutsplus.com/articles/new-features-and-a-new-look-for-sassdoc--cms-21914</guid>
	
	
	<pubDate>Tue, 12 Aug 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Keep Sass Simple</title>
	
	<link>http://www.sitepoint.com/keep-sass-simple/</link>
	<guid>http://www.sitepoint.com/keep-sass-simple/</guid>
	
	
	<pubDate>Wed, 30 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Podcast about Sass at CDNify</title>
	
	<link>https://cdnify.com/blog/sassdoc-document-sass-files-functions-mixins/</link>
	<guid>https://cdnify.com/blog/sassdoc-document-sass-files-functions-mixins/</guid>
	
	
	<pubDate>Thu, 24 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Using Sass to build color palettes</title>
	
	<link>http://www.sitepoint.com/using-sass-build-color-palettes/</link>
	<guid>http://www.sitepoint.com/using-sass-build-color-palettes/</guid>
	
	
	<pubDate>Thu, 17 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Automating CSS animations with Sass</title>
	
	<link>http://hugogiraudel.com/2014/07/16/automating-css-animations-with-sass</link>
	<guid>/2014/07/16/automating-css-animations-with-sass</guid>
	
	
	<pubDate>Wed, 16 Jul 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;The other day, &lt;a href=&quot;https://twitter.com/csswizardry&quot;&gt;Harry Roberts&lt;/a&gt; featured a snippet of code from his own site &lt;a href=&quot;https://twitter.com/csswizardry/status/489038580128686081&quot;&gt;on Twitter&lt;/a&gt;, asking for some ways to improve it (if any). What Harry did was computing by hand the keyframes of a carousel animation, thus claiming that high school algebra indeed &lt;strong&gt;is&lt;/strong&gt; useful.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Why do we have to learn algebra, Miss? We’re never going to use it…”  &lt;br /&gt;
—Everyone in my maths class  &lt;br /&gt;
&lt;a href=&quot;http://bit.ly/UaM2wf&quot;&gt;bit.ly/UaM2wf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;What’s the idea?&lt;/h2&gt;

&lt;p&gt;As far as I can see, Harry uses a carousel to display quotes about his work on his &lt;a href=&quot;http://csswizardry.com&quot;&gt;home page&lt;/a&gt;. Why use JavaScript when we can use CSS, right? So he uses a CSS animation to run the carousel. That sounds like a lovely idea, until you have to compute keyframes…&lt;/p&gt;

&lt;p&gt;Below is &lt;a href=&quot;https://github.com/csswizardry/csswizardry.github.com/blob/5e8de0bcdd845c1fc46d622a1c605af89ac13208/css/_components.carousel.scss#L42-L87&quot;&gt;Harry’s comment&lt;/a&gt; in his carousel component:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Scroll the carousel (all hard-coded; yuk!) and apply a subtle blur to imply motion/speed. Equation for the carousel’s transitioning and delayed points in order to complete an entire animation (i.e. 100%):&lt;/p&gt;

  &lt;p&gt;&lt;img style=&quot;display: block; margin: 0 0 1em 0; float: none; max-width: 100%;&quot; alt=&quot;Carousel formula&quot; src=&quot;/images/automating-css-animations-with-sass__formula-1.png&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;where &lt;var&gt;n&lt;/var&gt; is the number of slides, &lt;var&gt;x&lt;/var&gt; is the percentage of the animation spent static, and &lt;var&gt;y&lt;/var&gt; is the percentage of the animation spent animating.&lt;/p&gt;

  &lt;p&gt;This carousel has five panes, so:&lt;/p&gt;

  &lt;p&gt;&lt;img style=&quot;display: block; margin: 0 0 1em 0; float: none; max-width: 100%;&quot; alt=&quot;5 frames&quot; src=&quot;/images/automating-css-animations-with-sass__formula-2.png&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;To work out &lt;var&gt;y&lt;/var&gt; if we know &lt;var&gt;n&lt;/var&gt; and decide on a value for &lt;var&gt;x&lt;/var&gt;:&lt;/p&gt;

  &lt;p&gt;&lt;img style=&quot;display: block; margin: 0 0 1em 0; float: none; max-width: 100%;&quot; alt=&quot;Formula to find Y&quot; src=&quot;/images/automating-css-animations-with-sass__formula-3.png&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;If we choose that &lt;var&gt;x&lt;/var&gt; equals 17.5 (i.e. a frame spends 17.5% of the animation’s total time &lt;em&gt;not&lt;/em&gt; animating), and we know that &lt;var&gt;n&lt;/var&gt; equals 5, then &lt;var&gt;y&lt;/var&gt; = 3.125:&lt;/p&gt;

  &lt;p&gt;&lt;img style=&quot;display: block; margin: 0 0 1em 0; float: none; max-width: 100%;&quot; alt=&quot;Y when X equals 17.5&quot; src=&quot;/images/automating-css-animations-with-sass__formula-4.png&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;Static for 17.5%, transition for 3.125%, and so on, until we hit 100%.&lt;/p&gt;

  &lt;p&gt;If we were to choose that &lt;var&gt;x&lt;/var&gt; equals 15, then we would find that &lt;var&gt;y&lt;/var&gt; equals 6.25:&lt;/p&gt;

  &lt;p&gt;&lt;img style=&quot;display: block; margin: 0 0 1em 0; float: none; max-width: 100%;&quot; alt=&quot;Y when X equals 15&quot; src=&quot;/images/automating-css-animations-with-sass__formula-5.png&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;If &lt;var&gt;y&lt;/var&gt; comes out as zero-or-below, it means the number we chose for &lt;var&gt;x&lt;/var&gt; was too large: pick again.&lt;/p&gt;

  &lt;p&gt;N.B. We also include a halfway point in the middle of our transitioning frames to which we apply a subtle blur. This number is derived from:&lt;/p&gt;

  &lt;p&gt;&lt;img style=&quot;display: block; margin: 0 0 1em 0; float: none; max-width: 100%;&quot; alt=&quot;Computing a halfway point&quot; src=&quot;/images/automating-css-animations-with-sass__formula-6.png&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;where &lt;var&gt;a&lt;/var&gt; is the frame in question (out of &lt;var&gt;n&lt;/var&gt; frames). The halfway point between frames 3 and 4 is:&lt;/p&gt;

  &lt;p&gt;&lt;img style=&quot;display: block; margin: 0 0 1em 0; float: none; max-width: 100%;&quot; alt=&quot;Halfway point between frames 3 and 4&quot; src=&quot;/images/automating-css-animations-with-sass__formula-7.png&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;I’m pretty sure this is all a mess. To any kind person reading this who would be able to improve it, I would be very grateful if you would advise :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes carousel {
  0% { 
    transform: translate3d(0, 0, 0); 
    filter: blur(0);
  }
  17.5% { 
    transform: translate3d(0, 0, 0); 
    filter: blur(0);
  }
  19.0625% {                                      
    filter: blur(2px);
  }
  20.625% {
    transform: translate3d(-20%, 0, 0); 
    filter: blur(0);
  }
  38.125% { 
    transform: translate3d(-20%, 0, 0); 
    filter: blur(0);
  }
  39.6875% {                                
    filter: blur(2px);
  }
  41.25%   { 
    transform: translate3d(-40%, 0, 0); 
    filter: blur(0);
  }
  58.75%   { 
    transform: translate3d(-40%, 0, 0); 
    filter: blur(0);
  }
  60.3125% {                                      
    filter: blur(2px);
  }
  61.875%  { 
    transform: translate3d(-60%, 0, 0); 
    filter: blur(0);
  }
  79.375%  { 
    transform: translate3d(-60%, 0, 0); 
    filter: blur(0);
  }
  80.9375% {                                      
    filter: blur(2px);
  }
  82.5%    { 
    transform: translate3d(-80%, 0, 0); 
    filter: blur(0);
  }
  100%     { 
    transform: translate3d(-80%, 0, 0); 
    filter: blur(0);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Holy moly!&lt;/p&gt;

&lt;h2&gt;Cleaning the animation&lt;/h2&gt;

&lt;p&gt;Before even thinking about Sass, let’s lighten the animation a little bit. As we can see from the previous code block, some keyframes are identical. Let’s combine them to make the whole animation simpler:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes carousel {
  0%, 
  17.5% {
    transform: translate3d(0, 0, 0); 
    filter: blur(0);
  }

  19.0625% {
    filter: blur(2px);
  }

  20.625%, 
  38.125% {
    transform: translate3d(-20%, 0, 0); 
    filter: blur(0);
  }

  39.6875% {
    filter: blur(2px);
  }

  41.25%, 
  58.75% {
    transform: translate3d(-40%, 0, 0); 
    filter: blur(0);
  }

  60.3125% {
    filter: blur(2px);
  }

  61.875%, 
  79.375% {
    transform: translate3d(-60%, 0, 0); 
    filter: blur(0);
  }

  80.9375% {
    filter: blur(2px);
  }

  82.5%, 
  100% {
    transform: translate3d(-80%, 0, 0); 
    filter: blur(0);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fine! That’s less code to output.&lt;/p&gt;

&lt;h2&gt;Bringing Sass in the game&lt;/h2&gt;

&lt;p&gt;Keyframes are typically the kind of things you can optimize. Because they are heavily bound to numbers and loop iterations, it is usually quite easy to generate a repetitive &lt;code&gt;@keyframes&lt;/code&gt; animation with a loop. Let’s try that, shall we?&lt;/p&gt;

&lt;p&gt;First, bring the basics. For sake of consistency, I kept Harry’s variable names: &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. Let’s not forget their meaning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;$n&lt;/code&gt; is the number of frames in the animation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$x&lt;/code&gt; is the percentage of the animation spent static for each frame. Logic wants it to be less than &lt;code&gt;100% / $n&lt;/code&gt; then.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$y&lt;/code&gt; is the percentage of the animation spent animation for each frame.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$n: 5;
$x: 17.5%;
$y: (100% - $n * $x) / ($n - 1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we need to open the &lt;code&gt;@keyframes&lt;/code&gt; directive, then a loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@keyframes carousel {
  @for $i from 0 to $n { // 0, 1, 2, 3, 4
    // Sass Magic
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside the loop, we will use Harry’s formulas to compute each pair of identical keyframes (for instance, 41.25% and 58.75%):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$current-frame: ($i * $x) + ($i * $y);
$next-frame: (($i + 1) * $x) + ($i + $y);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: braces are completely optional here, we just use them to keep things clean.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And now, we use those variables to generate a keyframe inside the loop. Let’s not forget to interpolate them so they are correctly output in the resulting CSS (more informations about &lt;a href=&quot;http://webdesign.tutsplus.com/tutorials/all-you-ever-need-to-know-about-sass-interpolation--cms-21375&quot;&gt;Sass interpolation on Tuts+&lt;/a&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;#{$current-frame, $next-frame} {
  transform: translateX($i * -100% / $frames);
  filter: blur(0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite simple, isn’t it? For the first loop run, this would output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;0%, 17.5% {
  transform: translate3d(0%, 0, 0);
  filter: blur(0);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All we have left is outputing what Harry calls &lt;em&gt;an halfway frame&lt;/em&gt; to add a little blur effect. Then again, we’ll use his formula to compute the keyframe selectors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$halfway-frame: $i * ($x / 1%) + ($i - 1) * $y + ($y / 2);

#{$halfway-frame} {
  filter: blur(2px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oh-ho! We got an error here!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Invalid CSS after “”: expected keyframes selector (e.g. 10%), was “-1.5625%”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, we end up with a negative keyframe selector. This is prohibited by the &lt;a href=&quot;http://www.w3.org/TR/css3-animations/#keyframes&quot;&gt;CSS specifications&lt;/a&gt; and Sass considers this a syntax error so we need to make sure this does not happen. Actually, it only happens when &lt;code&gt;$i&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, so basically on first loop run. An easy way to prevent this error from happening is to condition the output of this rule to the value of &lt;code&gt;$i&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@if $i &amp;gt; 0 {
  #{$halfway-frame} {
    filter: blur(2px);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Error gone, all good! So here is how our code looks so far:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$n: 5;
$x: 17.5%;
$y: (100% - $n * $x) / ($n - 1);

@keyframes carousel {
  @for $i from 0 to $n {
    $current-frame: ($i * $x) + ($i * $y);
    $next-frame: (($i + 1) * $x) + ($i + $y);

    #{$current-frame, $next-frame} {
      transform: translate3d($i * -100% / $frames, 0, 0);
    }

    $halfway-frame: $i * ($x / 1%) + ($i - 1) * $y + ($y / 2);

    @if $i &amp;gt; 0 {
      #{$halfway-frame} {
        filter: blur(2px);
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Pushing things further with a mixin&lt;/h2&gt;

&lt;p&gt;So far so good? It works pretty well in automating Harry’s code so he does not have to compute everything from scratch again if he ever wants to display —let’s say— 4 slides instead of 5, or wants the animation to be quicker or longer.&lt;/p&gt;

&lt;p&gt;But we are basically polluting the global scope with our variables. Also, if he needs another carousel animation elsewhere, we will need to find other variable names, and copy the whole content of the animation into the new one. That’s definitely not ideal.&lt;/p&gt;

&lt;p&gt;So we have variables and possible duplicated content: &lt;a href=&quot;http://www.sitepoint.com/sass-mixin-placeholder/&quot;&gt;perfect case for a mixin&lt;/a&gt;! In order to make things easier to understand, we will replace those one-letter variable names with actual words if you don’t mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;$n&lt;/code&gt; becomes &lt;code&gt;$frames&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$x&lt;/code&gt; becomes &lt;code&gt;$static&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;$y&lt;/code&gt; becomes &lt;code&gt;$animating&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, because a mixin can be called several times with different arguments, we should make sure it outputs different animations. For this, we need to add a 3rd parameter: the animation name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin carousel-animation($frames, $static, $name: &#39;carousel&#39;) {
  $animating: (100% - $frames * $static) / ($frames - 1);

  // Moar Sass
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since it is now a mixin, it can be called from several places: probably the root level, but there is nothing preventing us from including it from within a selector. Because &lt;code&gt;@&lt;/code&gt;-directives need to be stand at root level in CSS, we’ll use &lt;code&gt;@at-root&lt;/code&gt; from Sass to make sure the animation gets output at root level.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin carousel-animation($frames, $static, $name: &#39;carousel&#39;) {
  $animating: (100% - $frames * $static) / ($frames - 1);

  @at-root {
    @keyframes #{$name} {
      // Animation logic here
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rest is pretty much the same. Calling it is quite easy now:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include carousel-animation(
  $frames: 5, 
  $static: 17.5%
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Resulting in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;@keyframes carousel {
  0%, 17.5% {
    transform: translateX(0%);
    filter: blur(0);
  }
  19.0625% {
    filter: blur(2px);
  }
  20.625%, 38.125% {
    transform: translateX(-20%);
    filter: blur(0);
  }
  39.6875% {
    filter: blur(2px);
  }
  41.25%, 58.75% {
    transform: translateX(-40%);
    filter: blur(0);
  }
  60.3125% {
    filter: blur(2px);
  }
  61.875%, 79.375% {
    transform: translateX(-60%);
    filter: blur(0);
  }
  80.9375% {
    filter: blur(2px);
  }
  82.5%, 100% {
    transform: translateX(-80%);
    filter: blur(0);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mission accomplished! And if we want another animation for the contact page for instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@include carousel-animation(
  $name: &#39;carousel-contact&#39;,
  $frames: 3, 
  $static: 20%
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty neat, heh?&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;That’s pretty much it. While Harry’s initial code is easier to read for the human eye, it’s really not ideal when it comes to maintenance. That’s where Sass can comes in handy, automating the whole thing with calculations and loops. It does make the code a little more complex, but it also makes it easier to maintain and update for future use cases.&lt;/p&gt;

&lt;p&gt;You can play with the code on SassMeister:&lt;/p&gt;

&lt;p class=&quot;sassmeister&quot; data-gist-id=&quot;b657072d11c527f3a016&quot; data-height=&quot;480&quot;&gt;&lt;a href=&quot;http://sassmeister.com/gist/b657072d11c527f3a016&quot;&gt;Play with this gist on SassMeister.&lt;/a&gt;&lt;/p&gt;
&lt;script src=&quot;http://cdn.sassmeister.com/js/embed.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

</description>
</item>


<item>
	<title>Semantic Versioning: why you should be using it</title>
	
	<link>http://www.sitepoint.com/semantic-versioning-why-you-should-using/</link>
	<guid>http://www.sitepoint.com/semantic-versioning-why-you-should-using/</guid>
	
	
	<pubDate>Wed, 09 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>SassyLists moving to 2.x</title>
	
	<link>http://web-design-weekly.com/2014/07/08/sassylists-moving-2-x/</link>
	<guid>http://web-design-weekly.com/2014/07/08/sassylists-moving-2-x/</guid>
	
	
	<pubDate>Tue, 08 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>SassDoc, a documentation tool for Sass</title>
	
	<link>http://www.sitepoint.com/sassdoc-documentation-tool-sass/</link>
	<guid>http://www.sitepoint.com/sassdoc-documentation-tool-sass/</guid>
	
	
	<pubDate>Thu, 03 Jul 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>

		
	</channel>
</rss>

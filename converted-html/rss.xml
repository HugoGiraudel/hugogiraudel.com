

<rss version="2.0">
	<channel>
		<title>HugoGiraudel.com</title>
		<link>http://hugogiraudel.com</link>
		<description>I write about Sass. Mostly.</description>
		<language>en</language>
		<copyright>2014</copyright>
		
			

<item>
	<title>A better solution for managing z-index with Sass</title>
	
	<link>http://www.sitepoint.com/better-solution-managing-z-index-sass/</link>
	<guid>http://www.sitepoint.com/better-solution-managing-z-index-sass/</guid>
	
	
	<pubDate>Fri, 20 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Template engines and JavaScript</title>
	
	<link>http://hugogiraudel.com/2014/06/17/template-engines-and-javascript</link>
	<guid>/2014/06/17/template-engines-and-javascript</guid>
	
	
	<pubDate>Tue, 17 Jun 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;I couldn&amp;#8217;t find an appropriate title. I recently &lt;a href=&quot;http://mixture.io/blog/jekyll-mixture/&quot;&gt;moved my site from Jekyll to Mixture&lt;/a&gt; and took the time to rethink the way I dealt with JavaScript. In this article, I will give you my opinion regarding this topic and show you how I managed to execute conditional JavaScript depending on global variables.&lt;/p&gt;

&lt;h2&gt;Template what..?&lt;/h2&gt;

&lt;p&gt;A template engine is some kind of tool helping you writing markup. &lt;a href=&quot;&quot;&gt;Twig&lt;/a&gt; is the template engine coming with Symfony. Both Jekyll and Mixture uses &lt;a href=&quot;&quot;&gt;Liquid&lt;/a&gt;, the template engine from Shopify. You may also have heard of Smarty, Mustache.js or Handlebars.js.&lt;/p&gt;

&lt;p&gt;The idea behind any template engine is to have template files that can be used and reused, imported and extended in order to have a dynamic, DRY and reusable HTML architecture. In this article, I will mostly talk about Liquid because it is the one used by Jekyll and Mixture, as well as Twig which I heavily use at work.&lt;/p&gt;

&lt;h2&gt;What&amp;#8217;s the matter?&lt;/h2&gt;

&lt;p&gt;Template engines expose global variables. In Liquid, those are mostly the ones declared in your YAML Front Matter (the header from every post). In Twig, they can be data passed from the controller, or super-global variables, whatever.&lt;/p&gt;

&lt;blockquote class=&quot;pull-quote--right&quot;&gt;Don't write your JS in template files.&lt;/blockquote&gt;

&lt;p&gt;Sometimes, you need to access such variables in your JavaScript code. Let me make this as clear as possible: writing JavaScript in a template file just because you need a variable from a template is not a clean solution. At work, we had developers writing huge chunks of JavaScript in &lt;code&gt;.html.twig&lt;/code&gt; files because they needed some data from the controller in their JavaScript application. This sucks.&lt;/p&gt;

&lt;p&gt;JavaScript should mostly go in &lt;code&gt;.js&lt;/code&gt; file. Markup should go in template files. Not the other way around. Especially not when it&amp;#8217;s getting bigger than a couple of lines.&lt;/p&gt;

&lt;h2&gt;Back to the problem&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s get back to the initial topic: on my blog, I need to execute some JavaScript snippets depending on the variables declared in the YAML Front Matter from the page I am in. For instance if the article includes a CodePen, I should be able to tell JavaScript to include CodePen JS file. If the article allows comments (which is usually the case), then JavaScript should include Disqus. If I want the article to include a table of contents at the top, then JavaScript should be aware of that and do what needs to be done.&lt;/p&gt;

&lt;p&gt;Before moving to Mixture, I handled the problem in a rather drastic (and dirty) way: all templates included a &lt;code&gt;scripts.liquid&lt;/code&gt; file at the bottom. In this file, I wrapped JavaScript snippets with Liquid conditions. For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;{% if post.codepen %}
  &amp;lt;script src=&quot;... source to CodePen JS file ...&quot;&amp;gt;&amp;lt;/script&amp;gt;
{% endif % }

{% if post.comments %}
  ... Disqus JavaScript snippet ...
{% endif %}

{% if post.tableOfContents %}
  ... Table of contents JavaScript snipppet ...
{% endif %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this is not ideal. First, JavaScript lays in a template file. We could work around the issue by moving JavaScript snippets to separate &lt;code&gt;.js&lt;/code&gt; files, then only include them when needed but we would possibly do several HTTP requests while a single one could be enough. Secondly, it is ugly. Very ugly.&lt;/p&gt;

&lt;h2&gt;A possible solution&lt;/h2&gt;

&lt;p&gt;When moving to Mixture, I took the time to think of how I would solve this issue to end up with a clean and DRY solution. The first thing I wanted to do was putting the JavaScript in &lt;a href=&quot;https://github.com/HugoGiraudel/hugogiraudel.github.com/blob/mixture/assets/js/src/app.js&quot;&gt;a &lt;code&gt;.js&lt;/code&gt; file&lt;/a&gt;, so let&amp;#8217;s start with that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// app.js
(function (global) {

  var App = function (conf) {
    this.conf = global.extend({
      codepen: false,
      sassmeister: false,
      tableOfContent: false,
      tracking: true,
      ad: true,
      comments: false,
      layout: 'default',
      disqus: {
        name: 'hugogiraudel',
        title: false,
        url: window.location.href
      }
    }, conf || {});

    this.initialize();
  };

  App.prototype.initialize = function () { /* ... */ };

  global.App = App;
}(window))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what&amp;#8217;s going on here? In a JavaScript file, in a closure, we define a new class called &lt;code&gt;App&lt;/code&gt;, that can be instantiated with an object of options (&lt;code&gt;conf&lt;/code&gt;). This one is extended with an object of default parameters. When instantiated, it automatically calls the &lt;code&gt;initialize()&lt;/code&gt; method. Let&amp;#8217;s see what it does.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;App.prototype.initialize = function () {
  if (this.conf.tracking === true) {
    this.tracking();
  }

  if (this.conf.ad === true) {
    this.ad();
  }

  if (this.conf.comments === true) {
    this.comments();
  }

  if (this.conf.codepen === true) {
    this.codepen();
  }

  if (this.conf.sassmeister === true) {
    this.sassmeister();
  }

  // ...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No magic here, the &lt;code&gt;initialize()&lt;/code&gt; method simply calls other methods based on the configuration. We could simplify the code even more by calling the methods based on the configuration key names:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;['tracking', 'ad', 'comments', 'codepen', 'sassmeister'].forEach(function (key) {
  if (this.conf[key] === true) {
    this[key]();
  }
}.bind(this));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it&amp;#8217;s no big deal, we don&amp;#8217;t really need this. And now, the other methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;App.prototype.tracking = function () {
  global._gaq = [
    ['_setAccount','UA-XXXXXXXX-X'],
    ['_trackPageview']
  ];

  this._inject(&quot;//www.google-analytics.com/ga.js&quot;);
};

App.prototype.ad = function () {
  this._inject(&quot;//engine.carbonads.com/z/24598/azcarbon_2_1_0_HORIZ&quot;);
};

App.prototype.comments = function () {
  global.disqus_shortname = this.conf.disqus.name;
  global.disqus_url = this.conf.disqus.url;
  global.disqus_title = this.conf.disqus.title;

  this._inject(&quot;//&quot; + disqus_shortname + &quot;.disqus.com/embed.js&quot;);
};

App.prototype.codepen = function () {
  this._inject(&quot;//codepen.io/assets/embed/ei.js&quot;);
};

App.prototype.sassmeister = function () {
  this._inject(&quot;//static.sassmeister.com/js/embed.js&quot;);
};

App.prototype._inject = function (url) {
  var d = document,
      s = &quot;script&quot;,
      g = d.createElement(s),
      z = d.getElementsByTagName(s)[0];

  g.async = true;
  g.src = url;
  z.parentNode.insertBefore(g, z);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All resources are loaded asynchronously thanks to the &lt;code&gt;_inject&lt;/code&gt; (pseudo-)private function.&lt;/p&gt;

&lt;h2&gt;So what?&lt;/h2&gt;

&lt;p&gt;We still haven&amp;#8217;t really solved the problem yet. How are we going to pass our Liquid variables to the JavaScript? Well, this is the moment we need to get back to &lt;a href=&quot;https://github.com/HugoGiraudel/hugogiraudel.github.com/blob/mixture/templates/includes/scripts.liquid&quot;&gt;&lt;code&gt;scripts.liquid&lt;/code&gt;&lt;/a&gt; file. No more conditional JavaScript snippets; instead, we instanciate the &lt;code&gt;App&lt;/code&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script src=&quot;/assets/js/main.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;script&amp;gt;
document.addEventListener('DOMContentLoaded', function() {
  var app = new App({
    codepen: {{ post.codepen }},
    sassmeister: {{ post.sassmeister }},
    tableOfContent: {{ post.summary }},
    comments: {{ post.comments }},
    layout: '{{ post.layout }}',
    disqus: {
      title: '{{ post.title }}',
    },
    tracking: true,
    ad: true
  });
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the only chunk of JavaScript in a template file. It is called on every page, once the DOM has been fully loaded. It grabs data from the YAML Front Matter in a clean and dynamic way. Than, JavaScript deals with the rest.&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;There you have it. A clean JavaScript application running on template variables, yet not using engine&amp;#8217;s conditional tags or being written in a template file.&lt;/p&gt;

&lt;p&gt;If you think of anything to improve it, be sure to share. In any case, I hope you liked it. :)&lt;/p&gt;
</description>
</item>


<item>
	<title>Moving from Jekyll to Mixture</title>
	
	<link>http://mixture.io/blog/jekyll-mixture/</link>
	<guid>http://mixture.io/blog/jekyll-mixture/</guid>
	
	
	<pubDate>Mon, 16 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Compass extension that are worth a try</title>
	
	<link>http://www.sitepoint.com/compass-extensions-worth-a-try/</link>
	<guid>http://www.sitepoint.com/compass-extensions-worth-a-try/</guid>
	
	
	<pubDate>Tue, 10 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Using Sass maps</title>
	
	<link>http://www.sitepoint.com/using-sass-maps/</link>
	<guid>http://www.sitepoint.com/using-sass-maps/</guid>
	
	
	<pubDate>Thu, 05 Jun 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Feedback on another conf</title>
	
	<link>http://hugogiraudel.com/2014/06/02/feedbacks-feweb</link>
	<guid>/2014/06/02/feedbacks-feweb</guid>
	
	
	<pubDate>Mon, 02 Jun 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;A couple of weeks ago, I have been invited by the &lt;a href=&quot;http://www.lafeweb.be/&quot;&gt;FeWeb&lt;/a&gt; (which stands for &lt;em&gt;La fédération des métiers du web&lt;/em&gt;, literally &lt;em&gt;Web professions Federation&lt;/em&gt;) to talk about Sass at &lt;a href=&quot;http://www.co-station.com/&quot;&gt;Co.Station&lt;/a&gt; in Bruxelles, Belgium.&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
&lt;img src=&quot;/images/feedbacks-feweb__feweb-costation.jpg&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;FeWeb's event, hosted by Co.Station&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Obviously I accepted and took a plane to travel 900 kilometers from home with my dearest in order to give a talk about Sass architecture. Hence a short blog post to relate how it went.&lt;/p&gt;

&lt;p&gt;Well, it went very well! Except for the weather which was pretty ugly and the fact that my girlfriend got her phone stolen. Anyway, the trip was worth it and we enjoyed Belgium. &lt;/p&gt;

&lt;h2&gt;The place&lt;/h2&gt;

&lt;p&gt;The Co.Station is a great spot in the heart of Bruxelles, aiming at helping startups, associations and business growing. In this case, Co.Station was hosting FeWeb&amp;#8217;s event.&lt;/p&gt;

&lt;p&gt;The room we were in was lovely. Completely made of white wood, perfectly lighted, very comfy. But&amp;#8230; it was not a room made for such a crowd. We were 120, yet I think it would be best for around 80 to 90 persons. Sorry for those poor guys who had to stand up for almost 2 hours, it sucks.&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
&lt;img src=&quot;/images/feedbacks-feweb__room.jpg&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;Crowded room is crowded.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;The talks&lt;/h2&gt;

&lt;p&gt;FeWeb&amp;#8217;s events are usually composed of 2 successive talks, then a couple of beers (remember it&amp;#8217;s in Belgium). Thus, &lt;a href=&quot;https://twitter.com/thierrymichel&quot;&gt;Thierry Michel&lt;/a&gt; was giving an introduction to Sass and Compass, then I talked about architecture and components. &lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
&lt;img src=&quot;/images/feedbacks-feweb__speakers.jpg&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;Thierry and I on stage.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Both talks have received positive feedbacks so I guess we did the job well. However, I was kind of nervous at first so I was speaking pretty fast, making my session a couple of minutes shorter than expected.&lt;/p&gt;

&lt;p&gt;Also when tensed I tend to speak in low voice, certainly as an attempt to calm things down. Because of that, I had to hold the mic in my hand during the whole presentation. Trust me, figuring out the distance between the mouth and the mic every single time you say something is definitely not the kind of things you want to think about. &lt;/p&gt;

&lt;p&gt;Anyway, I eventually went through the whole session and ended my talk peacefully. The audience was receptive and we got some interesting questions (what about post-processors, Autoprefixer&amp;#8230;), so it was pretty cool.&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
&lt;img src=&quot;/images/feedbacks-feweb__talk.jpg&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;Because LEGOs are cool.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2&gt;Slides&lt;/h2&gt;

&lt;blockquote class=&quot;pull-quote--right&quot;&gt;Not disappointed by &lt;a href=&quot;https://slides.com&quot;&gt;Slid.es&lt;/a&gt;.&lt;/blockquote&gt;

&lt;p&gt;Once again I have made my slides with &lt;a href=&quot;https://slides.com&quot;&gt;Slid.es&lt;/a&gt;, the CMS for &lt;a href=&quot;http://lab.hakim.se/reveal-js/#/&quot;&gt;Reveal.js&lt;/a&gt;. I even subscribed a PRO account to have access to all the cool features (offline and private decks, Dropbox sync, custom CSS, export to PDF&amp;#8230;). I also used the &lt;em&gt;presentation mode&lt;/em&gt; from Slid.es, which is great. Absolutely not disappointed.&lt;/p&gt;

&lt;p&gt;I won&amp;#8217;t walk through my slides like I did for my talk at &lt;a href=&quot;http://hugogiraudel.com/2013/07/01/feedbacks-kiwiparty/&quot;&gt;KiwiParty 2013&lt;/a&gt; because in this case it is less focused on code. Plus, I think they are better designed than the previous one.&lt;/p&gt;

&lt;p&gt;Anyway, here they are (in French).&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/hugogiraudel/sass-une-architecture-composee/embed&quot; width=&quot;100%&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;A warn thank to the FeWeb for their great welcome, the bear and the fries. And if you &amp;mdash; whoever you are &amp;mdash; were here on May 8th, thank you. If you were not, let&amp;#8217;s hope we meet at another event. &lt;/p&gt;
</description>
</item>


<item>
	<title>Compass or Bourbon</title>
	
	<link>http://www.sitepoint.com/compass-or-bourbon-sass-frameworks/</link>
	<guid>http://www.sitepoint.com/compass-or-bourbon-sass-frameworks/</guid>
	
	
	<pubDate>Fri, 30 May 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>How I came to write for the web</title>
	
	<link>http://hugogiraudel.com/2014/05/26/how-i-came-to-write-for-the-web</link>
	<guid>/2014/05/26/how-i-came-to-write-for-the-web</guid>
	
	
	<pubDate>Mon, 26 May 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;Today, no cool Sass stuff or neat CSS trick. I&amp;#8217;d like to address a slightly more personnal topic people keep asking me about: how I came up to write for big online magazine (SitePoint, Tuts+, Codrops&amp;#8230;). It&amp;#8217;s true I have been very active lately and some people want to know how I can keep up with such a large amount of write ups. Well, if you happen to be one of those people, let me tell you my story (yes, you might find it boring!).&lt;/p&gt;

&lt;p&gt;First of all, let me introduce with a little bit of background: as far as I can remember, I always liked writing. Back in high-school, I spent most French lessons writing prose or short stories. A few years later (late 2010), I launched a blog (in French) about World of Warcraft that got quite popular by the time. This was mostly due to the fact I published about 1000 words a day, and this during almost a year.&lt;/p&gt;

&lt;p&gt;Long story short, you&amp;#8217;d say I&amp;#8217;m a writer. Ironically, I have never enjoyed reading. You would think someone who likes to write also likes to read but that is not my case. I don&amp;#8217;t like reading. Especially books. I find it boring. Enough back story, let&amp;#8217;s move on.&lt;/p&gt;

&lt;h2&gt;How did it all started&lt;/h2&gt;

&lt;p&gt;In this section, I&amp;#8217;ll tell you how I went from doing CSS drawings on CodePen, to writing for SitePoint, CSS-Tricks and The Sass Way in about a year and a half. If you really just want to know how I write my articles, feel free to skip to the next section. &lt;/p&gt;

&lt;h3&gt;Codrops&lt;/h3&gt;

&lt;p&gt;During the summer vacations from 2012, I got contacted by &lt;a href=&quot;https://twitter.com/o_telho&quot;&gt;Pedro Botelho&lt;/a&gt; one of the two folks behind &lt;a href=&quot;http://tympanus.net/codrops/&quot;&gt;Codrops&lt;/a&gt; (the other one being the awesome &lt;a href=&quot;https://twitter.com/crnacura&quot;&gt;Manoela Ilic&lt;/a&gt;, whom &lt;a href=&quot;http://hugogiraudel.com/2013/03/11/interview-manoela-ilic/&quot;&gt;I interviewed later on this very blog&lt;/a&gt;) to know if I&amp;#8217;d be interested in writing for Codrops. I was mostly unknown (not that I am specially popular today) at that time and I spent most of my free time doing silly CSS demos on CodePen.&lt;/p&gt;

&lt;p&gt;Obviously I said &lt;em&gt;yes&lt;/em&gt; and got to write quite &lt;a href=&quot;http://tympanus.net/codrops/author/hugogiraudel/&quot;&gt;a couple of posts for Codrops&lt;/a&gt; between September 2012 and July 2013, including some pretty popular ones like &lt;a href=&quot;http://tympanus.net/codrops/2013/07/17/troubleshooting-css/&quot;&gt;Troubleshooting CSS&lt;/a&gt;. After a dozen articles over a year, I realized Codrops was looking for design-related posts while I felt more technic-focused. As a matter of facts, my last posts at Codrops were quite technical (dealing with CSS counters, &lt;code&gt;clip()&lt;/code&gt;, click events&amp;#8230;).&lt;/p&gt;

&lt;h3&gt;CSS-Tricks&lt;/h3&gt;

&lt;p&gt;At that time (mid 2013), &lt;a href=&quot;https://twitter.com/chriscoyier&quot;&gt;Chris Coyier&lt;/a&gt; from &lt;a href=&quot;http://css-tricks.com&quot;&gt;CSS-Tricks&lt;/a&gt; was looking for authors to help him complete the Almanac, an alternative to MDN Docs on CSS selectors and properties. Being a big fan of Chris&amp;#8217; work for years now, I have been helping him as much as I could, especially with a few interesting entries like &lt;a href=&quot;http://css-tricks.com/almanac/properties/g/grid/&quot;&gt;CSS Grid System&lt;/a&gt;, &lt;a href=&quot;http://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot;&gt;A Complete Guide to Flexbox&lt;/a&gt; and a few other cool properties as well. &lt;/p&gt;

&lt;p&gt;I still keep helping Chris updating the Almanac whenever I can. I recently added a couple entries, and we will soon update the Flexbox guide if Chris is still willing me to do so. I&amp;#8217;m learning a lot and it&amp;#8217;s a real pleasure to contribute to this famous site that is CSS-Tricks.&lt;/p&gt;

&lt;h3&gt;David Walsh&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/davidwalshblog&quot;&gt;David Walsh&lt;/a&gt; and Chris being good buddies, David asked me if I&amp;#8217;d be interested in writing a little article about Sass for his blog as a guest author (July 2013). A couple of days later, he released &lt;a href=&quot;http://davidwalsh.name/future-sass&quot;&gt;Looking into the Future of Sass&lt;/a&gt; where I explained what&amp;#8217;s coming up in Sass 3.3 which was on the tracks back then. Even today, this article is still getting linked to as an alternative to &lt;a href=&quot;http://sass-lang.com/documentation/file.SASS_CHANGELOG.html&quot;&gt;Sass&amp;#8217; official changelog&lt;/a&gt;. Needless to say you should check the changelog rather than external articles. ;)&lt;/p&gt;

&lt;p&gt;On the very beginning of 2014, I gathered my courage and let David release another guest post from me, this time about JavaScript. Yes, you read right! I explained how I built &lt;a href=&quot;http://davidwalsh.name/crud-javascript-class&quot;&gt;a CRUD JavaScript class&lt;/a&gt;. I spent a couple of days working on this piece of code and that was kind of a big deal for a JavaScript newbie like me to talk about it, especially at David Walsh&amp;#8217;s which is well known for his JS skills. Thankfully I&amp;#8217;ve got some positive feedbacks, so it&amp;#8217;s all good!&lt;/p&gt;

&lt;h3&gt;The Sass Way&lt;/h3&gt;

&lt;p&gt;A few months after my first article for David Walsh (October 2013), I think &lt;a href=&quot;https://twitter.com/johnwlong&quot;&gt;John W. Long&lt;/a&gt; from &lt;a href=&quot;http://thesassway.com&quot;&gt;The Sass Way&lt;/a&gt; asked me whether I&amp;#8217;d like publishing a write up at The Sass Way. The Sass Way being one of the most central places for Sass related stuff, I jumped on the occasion and released a completely silly post about &lt;a href=&quot;http://thesassway.com/advanced/math-sequences-with-sass&quot;&gt;Math sequences in Sass&lt;/a&gt;. While this was very interesting from a strictly technical point of view, it had absolutely no point whatsoever &amp;mdash; making the article completely useless.&lt;/p&gt;

&lt;p&gt;Thankfully, John gave me some extra opportunities to release more interesting articles on The Sass Way, including a cool one about &lt;a href=&quot;http://thesassway.com/advanced/how-to-programtically-go-from-one-color-to-another-in-sass&quot;&gt;how to programmatically go from one color to another&lt;/a&gt; which is &amp;mdash; in my opinion &amp;mdash; quite neat, especially if you&amp;#8217;re interested in how colors work.&lt;/p&gt;

&lt;h3&gt;SitePoint&lt;/h3&gt;

&lt;p&gt;In late January 2014, I got contacted by &lt;a href=&quot;https://twitter.com/ImpressiveWebs&quot;&gt;Louis Lazaris&lt;/a&gt; (who was just named at a new position at &lt;a href=&quot;http://sitepoint.com&quot;&gt;SitePoint&lt;/a&gt;) if I wanted to fill their CSS Section with a couple of Sass articles. Louis told me SitePoint at that time was willing to provide some content about CSS preprocessors, so he thought about me (thanks Louis!).&lt;/p&gt;

&lt;p&gt;The day after, I sent him a first article, ready to roll. And in the week-end that followed, I sent him 2 or 3 new write ups about Sass. At a point where my articles were not even passing by the &lt;em&gt;Approved topics&lt;/em&gt; and &lt;em&gt;Work in progress&lt;/em&gt; on Trello but directly popping into &lt;em&gt;Ready for edit&lt;/em&gt;. For about 3 months now, SitePoint has been releasing an article from me every week and I have to say I am very glad to be part of this.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m busting my ass to provide interesting and fresh Sass content (when it&amp;#8217;s not too technical, in which case I keep it for my own blog). And it&amp;#8217;s a really great adventure so I hope months from now, I&amp;#8217;ll still be giving them food for thoughts.&lt;/p&gt;

&lt;h3&gt;Webdesign Tuts+&lt;/h3&gt;

&lt;p&gt;Finally, a few weeks ago (March 2014) Ian Yates from &lt;a href=&quot;http://webdesign.tutsplus.com&quot;&gt;Webdesign Tuts+&lt;/a&gt; got in touch with me to know if I could write a little something about Sass. A round of applause for Tuts+ because for once, someone contacted to ask me to write about something very specific, and not a &lt;em&gt;about Sass&lt;/em&gt; or &lt;em&gt;about CSS&lt;/em&gt;. In this case, Ian asked me to talk about &lt;a href=&quot;design.tutsplus.com/tutorials/an-introduction-to-error-handling-in-sass--cms-19996&quot;&gt;error handling in Sass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This led to the fastest turn around in history because the same day I was able to hand over the finished article to Ian, which could be released on Webdesign Tuts+ the day after. So in about 24 hours, we went from not knowing each other, to having released an article on the site. That being said, it was fast because he knew right away what he wanted from me (and because I had some free time that day).&lt;/p&gt;

&lt;p&gt;I really enjoyed how things went the first time so I hope Webdesign Tuts+ and I will keep working together in the future. &lt;/p&gt;

&lt;h3&gt;Hugogiraudel.com&lt;/h3&gt;

&lt;p&gt;Last but not least, shortly after starting writing for Codrops, in November 2012, I launched my own blog to write about experiments and stuff. I&amp;#8217;ve been writing almost once a week since then, and plan on keep doing so for as long as I can.&lt;/p&gt;

&lt;h2&gt;About actually &lt;em&gt;writing&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;So far, I have talked about all the places I&amp;#8217;ve been writing for, but not really &lt;em&gt;how&lt;/em&gt; I write. As you may have noticed, this is usually getting fast: in most cases a couple of days after establishing contact, the first article is out. Apart from the fact I have some free time during the evening where I can write, there are a couple of other reasons. &lt;/p&gt;

&lt;h3&gt;I know my topic&lt;/h3&gt;

&lt;p&gt;Things are easier when you know what you&amp;#8217;re talking about. Have you ever tried to explain to someone something you barely know? It hurts. You stutter. You make sentences that don&amp;#8217;t always make sense. You take time to think before answering&amp;#8230; It takes time and effort. When you know your topic, it&amp;#8217;s getting simple. You don&amp;#8217;t have to &lt;em&gt;think carefully before you speak&lt;/em&gt;. It comes naturally.&lt;/p&gt;

&lt;p&gt;Remember the article about JavaScript for David Walsh? That was longer. Some Almanac entries for Chris Coyier took me days to write, especially the one about CSS Grid. But when I write about Sass (&lt;a href=&quot;https://gist.github.com/HugoGiraudel/8332582&quot;&gt;which is usually the case&lt;/a&gt;), it&amp;#8217;s getting very easy. Except for the little things I still don&amp;#8217;t get about Sass, I&amp;#8217;m okay with talking about it for hours.&lt;/p&gt;

&lt;h3&gt;I &lt;em&gt;one-shot&lt;/em&gt; articles&lt;/h3&gt;

&lt;p&gt;I never ever start an article without finishing it. Even this one you are currently reading. I wrote it in a single shot. If I leave an unfinished article, it will remain unfinished and won&amp;#8217;t ever be released. I still have a draft from March 2013 which was meant to be an article about table design for Codrops.&lt;/p&gt;

&lt;p&gt;I just can&amp;#8217;t get back to an article I started. This might look incapacitating but I see it as a strength. Writing an article from the beginning to the end in a single session helps me keeping track of my thoughts and having a structured meaningful result. &lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve seen friends working days on an article before delivering / releasing it. God, that would kill me. From start to end, every time. One shot. &lt;/p&gt;

&lt;h3&gt;I&amp;#8217;m a fast typer&lt;/h3&gt;

&lt;p&gt;This might seem silly, but I am a very fast typer and this is not trivial when writing a lot. I usually sit on a comfortable 80 to 100 words per minute while being able to hit up to 120 words per minute with &lt;a href=&quot;https://soundcloud.com/janskibeeeats/mini-montana&quot;&gt;appropriate music in the ears&lt;/a&gt;. &lt;/p&gt;

&lt;blockquote class=&quot;pull-quote--right&quot;&gt;There has always been a computer at home.&lt;/blockquote&gt;

&lt;p&gt;I grew up without a TV but as far as I can remember, there has always been a computer at home. When I was 3, my brother put me on Street Fighter, and I was smashing the keyboard with my little fingers without understanding much what I was doing. Before I was even 10, I started playing online. Which means typing to talk with people.&lt;/p&gt;

&lt;p&gt;A few years later in secondary school, we had typing lessons to help us use a keyboard; it was already earned. I remember finding a website where you had to type the alphabet as fast as you can. Then, there was a scoreboard displaying best scores. After a couple of days of practice, I managed to type the entire latin alphabet in about &lt;em&gt;2-3 seconds&lt;/em&gt;. As silly as this exercise may be, it helped a lot rushing a couple of keys in a short amount of time.&lt;/p&gt;

&lt;p&gt;Anyway, being a fast typer is part how I am able to release as many articles. Writing a post doesn&amp;#8217;t take forever because I can type almost as fast as I speak.&lt;/p&gt;

&lt;h2&gt;Writing process&lt;/h2&gt;

&lt;p&gt;Well, it involves Markdown, for sure. If you ask me about the greatest improvement regarding writing for the web, I&amp;#8217;d say it&amp;#8217;s Markdown. Being able to have structured content that doesn&amp;#8217;t hurt reading is essential. Add a syntax highlighter and you got the holy grail of web writing. I&amp;#8217;m not sure I&amp;#8217;d be writing that much if it wasn&amp;#8217;t for Markdown.&lt;/p&gt;

&lt;blockquote class=&quot;pull-quote--right&quot;&gt;Markdown is the best way to write for the web.&lt;/blockquote&gt;

&lt;p&gt;Anyway, I usually open a &lt;a href=&quot;http://gist.github.com&quot;&gt;Github Gist&lt;/a&gt; or Sublime Text and start writing in Markdown mode. As I&amp;#8217;ve explained in the previous section, once I&amp;#8217;ve started I don&amp;#8217;t stop until the end. It usually takes no more than a couple of minutes or dozens of minutes depending on the article&amp;#8217;s length. If everything is not perfect at first, it&amp;#8217;s no big deal. What&amp;#8217;s important is I have a backbone.&lt;/p&gt;

&lt;p&gt;Once I&amp;#8217;m done, I proof read the whole thing as if I were discovering it for the first time. I fix typos and try to level up my English so it&amp;#8217;s not too much pain for the reader (a.k.a &lt;em&gt;you&lt;/em&gt;) to read. It&amp;#8217;s very unusual I have to re-write a whole section but it happens. In this case, I just fill the blanks or update as needed.&lt;/p&gt;

&lt;p&gt;When the content seems fine, I have another read to see if I can add extras which would make the article more appealing: quotes, images, demos (usually as a Pen or a SassMeister Gist). If there is room for those, I add them.&lt;/p&gt;

&lt;p&gt;And finally, I hand it to the site aiming at publishing it (e.g. SitePoint) or schedule it for my own blog.&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;There we are folks; you know everything! There is no magic. I just love what I do thus I enjoy writing about it. That&amp;#8217;s why I&amp;#8217;ve been able to write about 50 articles since the beginning of the year. &lt;/p&gt;

&lt;p&gt;When I got some free time and a cool little idea in the back of my head, I open GitHub Gist, switch to Markdown and start typing. A couple of minutes later, the article is done, and I only have to proof read.&lt;/p&gt;

&lt;p&gt;Of course it is time consuming. Yet, I try to find some time to write, because I really enjoy it. That&amp;#8217;s all. If you want to write, you just have to love what you do.&lt;/p&gt;
</description>
</item>


<item>
	<title>Managing responsive breakpoints in Sass</title>
	
	<link>http://www.sitepoint.com/managing-responsive-breakpoints-sass/</link>
	<guid>http://www.sitepoint.com/managing-responsive-breakpoints-sass/</guid>
	
	
	<pubDate>Sun, 25 May 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>A new Sass mixin for offsets</title>
	
	<link>http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin</link>
	<guid>/2014/05/19/new-offsets-sass-mixin</guid>
	
	
	<pubDate>Mon, 19 May 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;About a year ago, I wrote about how I managed to come up with what I think is &lt;a href=&quot;http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/&quot;&gt;a clever Sass mixin to deal with offset positioning&lt;/a&gt; in CSS, also known as &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The mixin was directly inspired from &lt;a href=&quot;https://github.com/visionmedia/nib&quot;&gt;Nib&lt;/a&gt;, &lt;a href=&quot;http://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt;&amp;#8217; most popular framework. The idea is to be able to declare all desired offsets in a single declaration rather than having to write multiple CSS properties. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// Stylus syntax
selector {
  absolute: top 1em right 100%
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When looking back at Nib&amp;#8217;s documentation a couple of weeks ago, I noticed there are a couple of features I missed when implementing the Sass version of this little gem. Hence the brand new version of the mixin, and the blog post explaining the process.&lt;/p&gt;

&lt;p&gt;Unfortunately, Sass in its SCSS syntax doesn&amp;#8217;t provide as much abstraction as Stylus does, so we still have to use some extra characters, especially &lt;code&gt;@include&lt;/code&gt;, parenthesis, colons and semi-colons&amp;#8230; That being said, the result is quite good in my opinion.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// SCSS
selector {
  @include absolute(top 1em right 100%)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;What we want? Offsets!&lt;/h2&gt;

&lt;p&gt;Before jumping on the code, it is important to analyze the topic so we can implement things right. There are a few different use cases, but the main idea is always the same: we loop through the 4 offsets to see if they are being passed to our mixin. Then, depending on how it&amp;#8217;s going, various things happen. Let&amp;#8217;s see each case one by one.&lt;/p&gt;

&lt;p&gt;Case 1. &lt;strong&gt;The offset has not been found in the list.&lt;/strong&gt; Obviously, we stop there and do not output it.&lt;/p&gt;

&lt;p&gt;Case 2. &lt;strong&gt;The offset has been found at the last index of list.&lt;/strong&gt; We output it to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// SCSS
@include absolute(top);

// CSS
position: absolute;
top: 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Case 3. &lt;strong&gt;The offset has been found and the next item is another offset.&lt;/strong&gt; We output it to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// SCSS
@include absolute(top left);

// CSS
position: absolute;
top: 0;
left: 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Case 4. &lt;strong&gt;The offset has been found and the next item is invalid.&lt;/strong&gt; An invalid value could be a string other than &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;inherit&lt;/code&gt;, or any value that is not a number, or a unitless number. In any case, we do not output the offset.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// SCSS
@include absolute(top &quot;string&quot;);

// CSS
position: absolute;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Case 5. &lt;strong&gt;The offset has been found and the next item is valid.&lt;/strong&gt; Of course then, we output the offset with the next item as a value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// SCSS
@include absolute(top 1em);

// CSS
position: absolute;
top: 1em;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So if we sum up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if offset doesn&amp;#8217;t exist or offset exists but is followed by an invalid value, we don&amp;#8217;t output it&lt;/li&gt;
  &lt;li&gt;if offset exist as last item or offset is followed by another offset, we output it to &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;if offset exist and is followed by valid value, we output it to the value&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Starting with the helper&lt;/h2&gt;

&lt;p&gt;As you may have understood from what we have just seen, we will need to determine if the value directly following the offset is a valid value for an offset property (&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt; or &lt;code&gt;left&lt;/code&gt;). Nothing better than a little function to do that.&lt;/p&gt;

&lt;p&gt;Should be considered as a valid length:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a number with a unit&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;initial&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;inherit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@function is-valid-length($value) {
  @return (type-of($value) == &quot;number&quot; and not unitless($value)) 
       or (index(auto initial inherit 0, $value) != false);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function is as simple as that. First we check if it&amp;#8217;s a number with a unit. If it is not, we check whether it is an allowed value. If it is not again, then it is not a valid length for an offset property. &lt;/p&gt;

&lt;h2&gt;Building the mixin&lt;/h2&gt;

&lt;p&gt;Now that we have our helper function and all our use-cases, it is time to move on to the mixin. &lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position;
  
  @each $offset in $offsets {
    // Doing the magic trick
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there, we iterate through the offsets list (so 4 times) and for each one, we do the checks we discussed in the first section of this article. I added comments to the code so you can follow along but it is pretty straight forward anyway.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;// All this code happens inside the loop
$index: index($args, $offset);

// If offset is found in the list
@if $index {

  // If it is found at last position
  @if $index == length($args) {
    #{$offset}: 0;
  }

  // If it is followed by a value
  @else {
    $next: nth($args, $index + 1);

    // If the next value is value length
    @if is-valid-length($next) {
      #{$offset}: $next;
    }

    // If the next value is another offset
    @else if index($offsets, $next) {
      #{$offset}: 0;
    }

    // If it is invalid
    @else {
      @warn &quot;Invalid value `#{$next}` for offset `#{$offset}`.&quot;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then of course, there are still the 3 extra mixins &lt;code&gt;absolute&lt;/code&gt;, &lt;code&gt;relative&lt;/code&gt; and &lt;code&gt;fixed&lt;/code&gt;. This doesn&amp;#8217;t change at all from the previous version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@mixin absolute($args: ()) {
  @include position(absolute, $args);
}
 
@mixin fixed($args: ()) {
  @include position(fixed, $args);
}
 
@mixin relative($args: ()) {
  @include position(relative, $args);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Examples&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.a { 
  @include absolute()
}

.a {
  position: absolute;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.b {
  @include absolute(top)
}

.b {
  position: absolute;
  top: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.c {
  @include absolute(top right)
}

.c {
  position: absolute;
  top: 0;
  right: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.d {
  @include absolute(top right bottom)
}

.d {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.e {
  @include absolute(top right bottom left)
}

.e {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.f {
  @include absolute(top right 1em)
}

.f {
  position: absolute;
  top: 0;
  right: 1em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.g {
  @include absolute(top 1em right)
}

.g {
  position: absolute;
  top: 1em;
  right: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.h {
  @include absolute(top 1em right 100%)
}

.h {
  position: absolute;
  top: 1em;
  right: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.i {
  @include absolute(top right mistake)
}

.i {
  position: absolute;
  top: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;.j {
  @include absolute(top 1em right 1em bottom 1em left 1em)
}

.j {
  position: absolute;
  top: 1em;
  right: 1em;
  bottom: 1em;
  left: 1em;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;So here we go with the new version guys. It is slightly better than the old since you can now chain offsets to set them to &lt;code&gt;0&lt;/code&gt;, and extra keywords like &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;inherit&lt;/code&gt; are allowed, which wasn&amp;#8217;t the case before.&lt;/p&gt;

&lt;p&gt;I hope you like it. If you think of anything to improve it, be sure to share!&lt;/p&gt;

&lt;p class=&quot;sassmeister&quot; data-gist-id=&quot;f8ab9cc308b84e37b18d&quot; data-height=&quot;480&quot;&gt;&lt;a href=&quot;http://sassmeister.com/gist/f8ab9cc308b84e37b18d&quot;&gt;Play with this gist on SassMeister.&lt;/a&gt;&lt;/p&gt;
</description>
</item>

		
	</channel>
</rss>